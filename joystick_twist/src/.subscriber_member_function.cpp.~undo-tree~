(undo-tree-save-format-version . 1)
"7c66f45d39b7dd45b36f6e96956297266ec4deb5"
[nil nil nil nil (25987 5779 910600 557000) 0 nil]
([nil nil ((nil rear-nonsticky nil 686 . 687) (#("
" 0 1 (fontified nil c-in-sws t)) . -721) (686 . 722) (686 . 687) 702 (t 25986 52256 516072 173000)) nil (25987 5797 180207 711000) 0 nil] [nil nil ((673 . 674) (t 25986 52256 516072 173000)) ((#("h" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . 673)) (25987 5779 522079 921000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t c-in-sws t fontified t c-is-sws t)) . 686) (undo-tree-id76 . -1)) nil (25987 5797 180204 814000) 0 nil])
([nil nil ((704 . 705)) ((#("" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . 704) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1)) (25987 5779 114991 219000) 0 nil])
([nil nil ((#("#include \"sensor_msgs/msg/joy.hpp\"
" 0 1 (face font-lock-preprocessor-face c-in-sws t c-is-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t) 3 4 (face font-lock-preprocessor-face c-in-sws t fontified t) 4 5 (face font-lock-preprocessor-face c-in-sws t fontified t) 5 6 (face font-lock-preprocessor-face c-in-sws t fontified t) 6 7 (face font-lock-preprocessor-face c-in-sws t fontified t) 7 8 (face font-lock-preprocessor-face c-in-sws t fontified t) 8 9 (c-in-sws t fontified t) 9 10 (face font-lock-string-face c-in-sws t fontified t) 10 25 (face font-lock-string-face c-in-sws t fontified t) 25 26 (face font-lock-string-face c-in-sws t fontified t) 26 27 (face font-lock-string-face c-in-sws t fontified t) 27 28 (face font-lock-string-face c-in-sws t fontified t) 28 29 (face font-lock-string-face c-in-sws t fontified t) 29 30 (face font-lock-string-face c-in-sws t fontified t) 30 31 (face font-lock-string-face c-in-sws t fontified t) 31 32 (face font-lock-string-face c-in-sws t fontified t) 32 33 (face font-lock-string-face c-in-sws t fontified t) 33 34 (face font-lock-string-face c-in-sws t fontified t) 34 35 (c-in-sws t fontified t)) . 686) (undo-tree-id66 . -34) (undo-tree-id67 . -34) (undo-tree-id68 . -35) (undo-tree-id69 . -35) (undo-tree-id70 . -35) (undo-tree-id71 . -35) (undo-tree-id72 . -35) (undo-tree-id73 . -35) (undo-tree-id74 . -35) (undo-tree-id75 . -35)) nil (25987 5797 180201 191000) 0 nil])
([nil nil ((#("" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . 704) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1)) ((704 . 705)) (25987 5778 757326 815000) 0 nil])
([nil nil ((nil rear-nonsticky nil 721 . 722) (#("
" 0 1 (fontified nil c-in-sws t)) . -756) (721 . 757)) nil (25987 5797 180165 876000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . 704) (undo-tree-id17 . -1) (undo-tree-id18 . -1)) ((704 . 705)) (25987 5778 370467 299000) 0 nil])
([nil nil ((756 . 758)) nil (25987 5797 180160 462000) 0 nil])
([nil nil ((703 . 704)) ((#("h" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . 703) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1)) (25987 5778 60846 194000) 0 nil])
([nil nil ((#("std" 0 3 (face font-lock-constant-face fontified t)) . 948) (undo-tree-id432 . -2) (t 25987 5797 186910 677000)) nil (25987 5932 9235 615000) 0 nil])
([nil nil ((#("h" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . 703) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1)) ((703 . 704)) (25987 5778 60220 657000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-constant-face fontified t)) . 948)) nil (25987 5932 9234 200000) 0 nil])
nil
([nil nil ((#("msgs" 0 4 (face font-lock-constant-face fontified t)) . 948) (undo-tree-id431 . -3)) nil (25987 5932 9233 435000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 948) (undo-tree-id430 . -1)) nil (25987 5932 9232 392000) 0 nil])
([nil nil ((#("msg" 0 3 (face font-lock-constant-face fontified t)) . 948) (undo-tree-id429 . -2)) nil (25987 5932 9231 104000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 948) (undo-tree-id428 . -1)) nil (25987 5932 9229 841000) 0 nil])
([nil nil ((#("String" 0 6 (fontified t)) . 948) (undo-tree-id427 . -5)) nil (25987 5932 9228 347000) 0 nil])
([nil nil ((967 . 969) (966 . 967) (964 . 966) (961 . 964) (959 . 961) (948 . 959)) nil (25987 5932 9226 974000) 0 nil])
([nil nil ((#("topic" 0 5 (face font-lock-string-face fontified t)) . 979) (undo-tree-id425 . -4) (undo-tree-id426 . -5)) nil (25987 5932 9209 879000) 0 nil])
([nil nil ((980 . 983) (979 . 980)) nil (25987 5932 9208 295000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t)) . 979) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1)) nil (25987 5932 9205 673000) 0 nil])
([nil nil ((#("std" 0 3 (face font-lock-constant-face fontified t)) . 1089) (undo-tree-id414 . -2) (undo-tree-id415 . -3)) nil (25987 5932 9200 680000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-constant-face fontified t)) . 1089) (undo-tree-id413 . -1)) nil (25987 5932 9198 958000) 0 nil])
([nil nil ((#("msgs" 0 4 (face font-lock-constant-face fontified t)) . 1089) (undo-tree-id411 . -3) (undo-tree-id412 . -4)) nil (25987 5932 9197 759000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 1089) (undo-tree-id409 . -1) (undo-tree-id410 . -2)) nil (25987 5932 9196 135000) 0 nil])
([nil nil ((#("msg" 0 3 (face font-lock-constant-face fontified t)) . 1089) (undo-tree-id407 . -2) (undo-tree-id408 . -3)) nil (25987 5932 9194 383000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 1089) (undo-tree-id405 . -1) (undo-tree-id406 . -2)) nil (25987 5932 9192 742000) 0 nil])
([nil nil ((#("String " 0 6 (face font-lock-type-face fontified t) 6 7 (fontified t)) . 1089) (undo-tree-id403 . -6) (undo-tree-id404 . -7)) nil (25987 5932 9190 951000) 0 nil])
([nil nil ((1107 . 1111) (1105 . 1107) (1102 . 1105) (1101 . 1102) (#("\"" 0 1 (face font-lock-string-face fontified nil)) . -1101) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (nil syntax-table nil 1114 . 1115) (nil syntax-table (1) 1101 . 1102) (#("\"" 0 1 (face font-lock-string-face fontified t)) . 1102) (#(":" 0 1 (face font-lock-string-face fontified t)) . -1102) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) 1103 (1102 . 1103) (1102 . 1103) (nil syntax-table nil 1114 . 1115) (nil syntax-table (1) 1101 . 1102) (1101 . 1102) (#("\"" 0 1 (fontified nil)) . -1101) (nil syntax-table nil 1114 . 1115) (nil syntax-table (1) 1101 . 1102) (1101 . 1102) (1100 . 1101) (1099 . 1100) (#(":" 0 1 (fontified t)) . -1099) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#(":" 0 1 (fontified t)) . -1100) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1101) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -1102) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -1103) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) 1104 (#("s" 0 1 (face font-lock-type-face fontified t)) . -1104) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) 1105 (1101 . 1105) (1099 . 1101) (1095 . 1099) (#(":" 0 1 (fontified t)) . -1095) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#(":" 0 1 (fontified t)) . -1096) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -1097) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) 1098 (1097 . 1098) (1095 . 1097) (1089 . 1095)) nil (25987 5932 9176 148000) 0 nil])
([nil nil ((1128 . 1132) (1128 . 1130)) nil (25987 5932 8792 223000) 0 nil])
([nil nil ((#("std" 0 3 (face font-lock-constant-face fontified t)) . 1233) (undo-tree-id434 . -2) (t 25987 5932 14293 139000)) nil (25987 5954 919585 59000) 0 nil])
([nil nil ((1233 . 1239)) nil (25987 5954 919583 108000) 0 nil])
([nil nil ((#("String" 0 6 (face font-lock-type-face fontified t)) . 1251) (undo-tree-id433 . -5)) nil (25987 5954 919580 542000) 0 nil])
([nil nil ((1251 . 1254)) nil (25987 5954 919569 309000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face c-in-sws t c-is-sws t fontified t)) . 1132) (t 25987 5954 954186 494000)) nil (25987 6248 680866 665000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 1132)) nil (25987 6248 680864 673000) 0 nil])
([nil nil ((1128 . 1132) (1128 . 1130)) nil (25987 6248 680863 842000) 0 nil])
([nil nil ((#("    " 0 4 (c-in-sws t c-is-sws t fontified t)) . -1212) (undo-tree-id455 . -4) 1216 (1212 . 1216) (#("    " 0 4 (c-in-sws t c-is-sws t fontified nil)) . 1211) (undo-tree-id456 . -4) (1211 . 1216) (#("    " 0 1 (c-in-sws t c-is-sws t fontified nil) 1 4 (c-in-sws t c-is-sws t fontified nil)) . 1210) (undo-tree-id457 . -4) (1209 . 1215)) nil (25987 6248 680862 415000) 0 nil])
([nil nil ((1214 . 1218) (#("    " 0 4 (c-in-sws t c-is-sws t fontified nil)) . 1213) (undo-tree-id452 . -4) (1213 . 1218) (#("    " 0 4 (c-in-sws t c-is-sws t fontified nil)) . 1212) (undo-tree-id453 . -4) (1212 . 1217) (#("    " 0 4 (c-in-sws t c-is-sws t fontified nil)) . 1211) (undo-tree-id454 . -4) (1215 . 1216) (1211 . 1215)) nil (25987 6248 680858 550000) 0 nil])
([nil nil ((#("r" 0 1 (c-is-sws t fontified t)) . -1217) (undo-tree-id446 . -1) (#("c" 0 1 (fontified t)) . -1218) (undo-tree-id447 . -1) (#("l" 0 1 (fontified t)) . -1219) (undo-tree-id448 . -1) 1220 (1217 . 1220) (#("r" 0 1 (c-is-sws t fontified t)) . -1217) (undo-tree-id449 . -1) (#("c" 0 1 (fontified t)) . -1218) (undo-tree-id450 . -1) (#("l" 0 1 (fontified t)) . -1219) (undo-tree-id451 . -1) 1220 (1217 . 1220) (1213 . 1217)) nil (25987 6248 680853 648000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t c-in-sws t fontified t c-is-sws t)) . 721) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1)) nil (25987 6248 680844 873000) 0 nil])
([nil nil ((656 . 686) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1257 1268 nil nil nil nil nil)) nil 0 nil #s(yas--field 1 1257 1268 nil nil nil nil nil) nil nil)) (1215 . 1239) (#("RCLCPP_INFO(${1:logger, ...})" 0 1 (fontified nil c-is-sws t) 1 29 (fontified nil)) . 1215) (1215 . 1244) (#("RCLC" 0 1 (fontified nil c-is-sws t) 1 4 (fontified nil)) . 1215) (1215 . 1219) (#("RCLCPP_INFO(logger, ...)" 0 1 (fontified nil c-is-sws t) 1 24 (fontified nil)) . -1215) (1215 . 1239) (#("RCLCPP_IN" 0 1 (c-is-sws t fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . -1215) (undo-tree-id477 . -9) (undo-tree-id478 . -9) 1224 (1221 . 1224) (#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1221) (undo-tree-id479 . -1) 1222 (1221 . 1222) (#(")" 0 1 (fontified nil)) . -1221) (1221 . 1222) (1215 . 1221) (1211 . 1215) (t 25987 6248 716790 498000)) nil (25987 6366 609274 887000) 0 nil])
([nil nil ((#("    RCLCPP_INFO(logger, ...)
" 0 4 (fontified t c-in-sws t c-is-sws t) 4 5 (fontified t c-is-sws t) 5 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-3-face) fontified t) 16 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-3-face) fontified t) 28 29 (fontified t)) . 1241) (undo-tree-id458 . -28) (undo-tree-id459 . 13) (undo-tree-id460 . -15) (undo-tree-id461 . -15) (undo-tree-id462 . -15) (undo-tree-id463 . -16) (undo-tree-id464 . -15) (undo-tree-id465 . -15) (undo-tree-id466 . -15) (undo-tree-id467 . -15) (undo-tree-id468 . -15) (undo-tree-id469 . -15) (undo-tree-id470 . -15) (undo-tree-id471 . -15) (undo-tree-id472 . -15) (undo-tree-id473 . -15) (undo-tree-id474 . -15) (undo-tree-id475 . -15) (undo-tree-id476 . -29) (apply yas--snippet-revive 1245 1269 #s(yas--snippet nil (#s(yas--field 1 1257 1268 nil nil nil nil nil)) nil 0 nil #s(yas--field 1 1257 1268 nil nil nil nil nil) nil nil))) nil (25987 6366 609256 895000) 0 nil])
([nil nil ((1291 . 1292) (686 . 712) (1244 . 1265) (#("se" 0 1 (fontified nil c-is-sws t) 1 2 (fontified nil)) . 1244) (1244 . 1246) (#("rclcpp::SensorDataQoS" 0 1 (fontified nil c-is-sws t) 1 21 (fontified nil)) . -1244) (1244 . 1265) (#("sensor" 0 1 (c-is-sws t fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -1244) (undo-tree-id662 . -4) (undo-tree-id663 . -6) (undo-tree-id664 . -6) (undo-tree-id665 . -6) (undo-tree-id666 . -6) (undo-tree-id667 . -6) (undo-tree-id668 . -6) (undo-tree-id669 . -6) (undo-tree-id670 . -6) (undo-tree-id671 . -6) (undo-tree-id672 . -6) (undo-tree-id673 . -6) (undo-tree-id674 . -6) (undo-tree-id675 . -6) (undo-tree-id676 . -6) (undo-tree-id677 . -6) (undo-tree-id678 . -6) (undo-tree-id679 . -6) (undo-tree-id680 . -6) (undo-tree-id681 . -6) (undo-tree-id682 . -6) (undo-tree-id683 . -6) (undo-tree-id684 . -6) (undo-tree-id685 . -6) (undo-tree-id686 . -6) (undo-tree-id687 . -6) (undo-tree-id688 . -6) (undo-tree-id689 . -6) (undo-tree-id690 . -6) (undo-tree-id691 . -6) (undo-tree-id692 . -6) (undo-tree-id693 . -6) (undo-tree-id694 . -6) (undo-tree-id695 . -6) (undo-tree-id696 . -6) (undo-tree-id697 . -6) (undo-tree-id698 . -6) (undo-tree-id699 . -6) (undo-tree-id700 . -6) (undo-tree-id701 . -6) (undo-tree-id702 . -6) (undo-tree-id703 . -6) (undo-tree-id704 . -6) (undo-tree-id705 . -6) (undo-tree-id706 . -6) (undo-tree-id707 . -6) (undo-tree-id708 . -6) (undo-tree-id709 . -6) (undo-tree-id710 . -6) (undo-tree-id711 . -6) (undo-tree-id712 . -6) (undo-tree-id713 . -6) (undo-tree-id714 . -6) (undo-tree-id715 . -6) (undo-tree-id716 . -6) (undo-tree-id717 . -6) (undo-tree-id718 . -6) (undo-tree-id719 . -6) (undo-tree-id720 . -6) (undo-tree-id721 . -6) (undo-tree-id722 . -6) (undo-tree-id723 . -6) (undo-tree-id724 . -6) (undo-tree-id725 . -6) (undo-tree-id726 . -6) (undo-tree-id727 . -6) (undo-tree-id728 . -6) (undo-tree-id729 . -6) (undo-tree-id730 . -6) (undo-tree-id731 . -6) (undo-tree-id732 . -6) (undo-tree-id733 . -6) (undo-tree-id734 . -6) (undo-tree-id735 . -6) (undo-tree-id736 . -6) (undo-tree-id737 . -6) (undo-tree-id738 . -6) (undo-tree-id739 . -6) (undo-tree-id740 . -6) (undo-tree-id741 . -6) (undo-tree-id742 . -6) (undo-tree-id743 . -6) (undo-tree-id744 . -6) (undo-tree-id745 . -6) (undo-tree-id746 . -6) (undo-tree-id747 . -6) (undo-tree-id748 . -6) (undo-tree-id749 . -6) (undo-tree-id750 . -6) (undo-tree-id751 . -6) (undo-tree-id752 . -6) (undo-tree-id753 . -6) (undo-tree-id754 . -6) (undo-tree-id755 . -6) (undo-tree-id756 . -6) (undo-tree-id757 . -6) (undo-tree-id758 . -6) (undo-tree-id759 . -6) (undo-tree-id760 . -6) (undo-tree-id761 . -6) (undo-tree-id762 . -6) (undo-tree-id763 . -6) (undo-tree-id764 . -6) (undo-tree-id765 . -6) (undo-tree-id766 . -6) (undo-tree-id767 . -6) (undo-tree-id768 . -6) (undo-tree-id769 . -6) (undo-tree-id770 . -6) (undo-tree-id771 . -6) (undo-tree-id772 . -6) (undo-tree-id773 . -6) (undo-tree-id774 . -6) (undo-tree-id775 . -6) 1250 (1244 . 1250) (1240 . 1244) (t 25987 6366 620218 180000)) nil (25987 6378 152113 359000) 0 nil])
([nil nil ((#("    rclcpp::SensorDataQoS 
" 0 4 (fontified t c-in-sws t c-is-sws t) 4 5 (face font-lock-constant-face fontified t c-is-sws t) 5 10 (face font-lock-constant-face fontified t) 10 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t)) . 1266) (undo-tree-id480 . -26) (undo-tree-id481 . 1) (undo-tree-id482 . -4) (undo-tree-id483 . -27) (undo-tree-id484 . -4) (undo-tree-id485 . -25) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (undo-tree-id495 . -4) (undo-tree-id496 . -4) (undo-tree-id497 . -4) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -4) (undo-tree-id517 . -4) (undo-tree-id518 . -4) (undo-tree-id519 . -4) (undo-tree-id520 . -4) (undo-tree-id521 . -4) (undo-tree-id522 . -4) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (undo-tree-id525 . -4) (undo-tree-id526 . -4) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -4) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -4) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -4) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (undo-tree-id552 . -4) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) (undo-tree-id587 . -4) (undo-tree-id588 . -4) (undo-tree-id589 . -4) (undo-tree-id590 . -4) (undo-tree-id591 . -4) (undo-tree-id592 . -4) (undo-tree-id593 . -4) (undo-tree-id594 . -4) (undo-tree-id595 . -26) (undo-tree-id596 . -26) (undo-tree-id597 . -26) (undo-tree-id598 . -26) (undo-tree-id599 . -26) (undo-tree-id600 . -26) (undo-tree-id601 . -26) (undo-tree-id602 . -26) (undo-tree-id603 . -26) (undo-tree-id604 . -26) (undo-tree-id605 . -26) (undo-tree-id606 . -26) (undo-tree-id607 . -26) (undo-tree-id608 . -26) (undo-tree-id609 . -26) (undo-tree-id610 . -26) (undo-tree-id611 . -26) (undo-tree-id612 . -26) (undo-tree-id613 . -26) (undo-tree-id614 . -26) (undo-tree-id615 . -26) (undo-tree-id616 . -26) (undo-tree-id617 . -26) (undo-tree-id618 . -26) (undo-tree-id619 . -26) (undo-tree-id620 . -26) (undo-tree-id621 . -26) (undo-tree-id622 . -26) (undo-tree-id623 . -26) (undo-tree-id624 . -26) (undo-tree-id625 . -26) (undo-tree-id626 . -26) (undo-tree-id627 . -25) (undo-tree-id628 . -25) (undo-tree-id629 . -25) (undo-tree-id630 . -25) (undo-tree-id631 . -25) (undo-tree-id632 . -25) (undo-tree-id633 . -25) (undo-tree-id634 . -25) (undo-tree-id635 . -25) (undo-tree-id636 . -25) (undo-tree-id637 . -25) (undo-tree-id638 . -25) (undo-tree-id639 . -25) (undo-tree-id640 . -25) (undo-tree-id641 . -25) (undo-tree-id642 . -25) (undo-tree-id643 . -25) (undo-tree-id644 . -25) (undo-tree-id645 . -25) (undo-tree-id646 . -25) (undo-tree-id647 . -25) (undo-tree-id648 . -25) (undo-tree-id649 . -25) (undo-tree-id650 . -25) (undo-tree-id651 . -25) (undo-tree-id652 . -25) (undo-tree-id653 . -25) (undo-tree-id654 . -25) (undo-tree-id655 . -25) (undo-tree-id656 . -25) (undo-tree-id657 . -25) (undo-tree-id658 . -25) (undo-tree-id659 . -25) (undo-tree-id660 . -25) (undo-tree-id661 . -27) 1291) nil (25987 6378 151985 995000) 0 nil])
([nil nil ((1272 . 1288) (#(" " 0 1 (fontified t)) . -1272) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) 1273 (1272 . 1273) (#("w" 0 1 (fontified t)) . -1272) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#(" " 0 1 (fontified t)) . -1273) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 1274 (1270 . 1274) (1266 . 1270) (#("   " 0 3 (fontified nil c-is-sws t c-in-sws t)) . -1266) (undo-tree-id162 . -3) (#(" " 0 1 (fontified t c-is-sws t c-in-sws t)) . 1269) (t 25987 6378 160161 887000)) nil (25987 11046 895062 777000) 0 nil])
([nil nil ((1286 . 1287)) nil (25987 11046 895011 218000) 0 nil])
([nil nil ((#("    How do i solve this
" 0 1 (fontified t c-is-sws t c-in-sws t) 1 4 (fontified t c-is-sws t c-in-sws t) 4 5 (fontified t c-is-sws t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t face font-lock-keyword-face) 22 23 (fontified t face font-lock-keyword-face) 23 24 (fontified t)) . 1266) (undo-tree-id0 . -20) (undo-tree-id1 . -23) (undo-tree-id2 . -6) (undo-tree-id3 . -6) (undo-tree-id4 . -6) (undo-tree-id5 . -6) (undo-tree-id6 . -6) (undo-tree-id7 . -6) (undo-tree-id8 . -6) (undo-tree-id9 . -6) (undo-tree-id10 . -6) (undo-tree-id11 . -6) (undo-tree-id12 . -6) (undo-tree-id13 . -6) (undo-tree-id14 . -6) (undo-tree-id15 . -6) (undo-tree-id16 . -6) (undo-tree-id17 . -6) (undo-tree-id18 . -6) (undo-tree-id19 . -6) (undo-tree-id20 . -6) (undo-tree-id21 . -6) (undo-tree-id22 . -6) (undo-tree-id23 . -6) (undo-tree-id24 . -6) (undo-tree-id25 . -6) (undo-tree-id26 . -6) (undo-tree-id27 . -6) (undo-tree-id28 . -6) (undo-tree-id29 . -6) (undo-tree-id30 . -6) (undo-tree-id31 . -6) (undo-tree-id32 . -6) (undo-tree-id33 . -6) (undo-tree-id34 . -4) (undo-tree-id35 . -23) (undo-tree-id36 . -23) (undo-tree-id37 . -23) (undo-tree-id38 . -23) (undo-tree-id39 . -23) (undo-tree-id40 . -23) (undo-tree-id41 . -23) (undo-tree-id42 . 3) (undo-tree-id43 . -22) (undo-tree-id44 . -22) (undo-tree-id45 . -22) (undo-tree-id46 . -22) (undo-tree-id47 . -22) (undo-tree-id48 . -22) (undo-tree-id49 . -22) (undo-tree-id50 . -22) (undo-tree-id51 . -22) (undo-tree-id52 . -20) (undo-tree-id53 . -20) (undo-tree-id54 . -20) (undo-tree-id55 . -20) (undo-tree-id56 . -20) (undo-tree-id57 . -20) (undo-tree-id58 . -20) (undo-tree-id59 . -20) (undo-tree-id60 . -20) (undo-tree-id61 . -19) (undo-tree-id62 . -19) (undo-tree-id63 . -19) (undo-tree-id64 . -19) (undo-tree-id65 . -19) (undo-tree-id66 . -19) (undo-tree-id67 . -19) (undo-tree-id68 . -19) (undo-tree-id69 . -19) (undo-tree-id70 . -20) (undo-tree-id71 . -20) (undo-tree-id72 . -20) (undo-tree-id73 . -20) (undo-tree-id74 . -20) (undo-tree-id75 . -20) (undo-tree-id76 . -20) (undo-tree-id77 . -20) (undo-tree-id78 . -20) (undo-tree-id79 . -21) (undo-tree-id80 . -21) (undo-tree-id81 . -21) (undo-tree-id82 . -21) (undo-tree-id83 . -21) (undo-tree-id84 . -21) (undo-tree-id85 . -21) (undo-tree-id86 . -21) (undo-tree-id87 . -20) (undo-tree-id88 . -20) (undo-tree-id89 . -20) (undo-tree-id90 . -20) (undo-tree-id91 . -20) (undo-tree-id92 . -20) (undo-tree-id93 . -20) (undo-tree-id94 . -20) (undo-tree-id95 . -20) (undo-tree-id96 . -4) (undo-tree-id97 . -24) (undo-tree-id98 . -20) (undo-tree-id99 . -20) (undo-tree-id100 . -20) (undo-tree-id101 . -20) (undo-tree-id102 . -20) (undo-tree-id103 . -20) (undo-tree-id104 . -20) (undo-tree-id105 . -20) (undo-tree-id106 . -20) (undo-tree-id107 . -20) (undo-tree-id108 . -20) (undo-tree-id109 . -20) (undo-tree-id110 . -20) (undo-tree-id111 . -20) (undo-tree-id112 . -20) (undo-tree-id113 . -20) (undo-tree-id114 . -20) (undo-tree-id115 . -24) 1286) nil (25987 11046 895001 564000) 0 nil])
([nil nil ((1266 . 1270) (#("    " 0 1 (fontified t c-is-sws t c-in-sws t) 1 4 (fontified t c-is-sws t c-in-sws t)) . 1266) (undo-tree-id170 . 4) (t 25987 11046 903922 78000)) nil (25987 11096 151748 764000) 0 nil])
([nil nil ((1350 . 1354)) nil (25987 11096 151746 637000) 0 nil])
([nil nil ((1379 . 1383) (1378 . 1382) (1375 . 1377) (1375 . 1377) (1374 . 1375) (#(" " 0 1 (fontified t)) . -1374) (undo-tree-id164 . -1) 1375 (1365 . 1375) (#("_" 0 1 (fontified t)) . -1365) (undo-tree-id165 . -1) (#("P" 0 1 (fontified t)) . -1366) (undo-tree-id166 . -1) 1367 (1359 . 1367) (#("R" 0 1 (fontified t)) . -1359) (undo-tree-id167 . -1) (#("o" 0 1 (fontified t)) . -1360) (undo-tree-id168 . -1) (#("s" 0 1 (fontified t)) . -1361) (undo-tree-id169 . -1) 1362 (1353 . 1362)) nil (25987 11096 151744 133000) 0 nil])
([nil nil ((1387 . 1388)) nil (25987 11096 151736 349000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face font-lock-type-face)) . 1353)) nil (25987 11096 151735 729000) 0 nil])
([nil nil ((1353 . 1354)) nil (25987 11096 151735 165000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . 1375)) nil (25987 11096 151734 331000) 0 nil])
([nil nil ((1377 . 1379) (#("    " 0 4 (fontified t)) . 1377)) nil (25987 11096 151732 420000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . 1380) (undo-tree-id163 . -1) 1381) nil (25987 11096 151727 597000) 0 nil])
([nil nil ((1379 . 1381) (#("  " 0 2 (fontified nil)) . 1378) (undo-tree-id249 . -2) (1378 . 1381) (#("  " 0 2 (fontified nil)) . 1377) (undo-tree-id250 . -2) (1379 . 1380) (1377 . 1379) (#("  " 0 2 (fontified t)) . 1377) (t 25987 11096 159904 209000)) nil (25987 11286 638790 701000) 0 nil])
([nil nil ((1396 . 1399) (#("  " 0 2 (fontified nil)) . 1388) (1397 . 1398) (1390 . 1397) (1388 . 1390) (#("  " 0 2 (fontified nil)) . 1387) (undo-tree-id246 . -2) (1387 . 1390) (#("  " 0 2 (fontified nil)) . 1386) (undo-tree-id247 . -2) (1385 . 1389) (#("  " 0 2 (fontified nil)) . 1378) (1386 . 1387) (1380 . 1386) (1378 . 1380) (#("  " 0 2 (fontified nil)) . 1377) (undo-tree-id248 . -2) (1379 . 1380) (1377 . 1379)) nil (25987 11286 638787 242000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -1388) (undo-tree-id234 . -1) (#("l" 0 1 (fontified t)) . -1389) (undo-tree-id235 . -1) (#("a" 0 1 (fontified t)) . -1390) (undo-tree-id236 . -1) (#("s" 0 1 (fontified t)) . -1391) (undo-tree-id237 . -1) (#("s" 0 1 (fontified t face font-lock-keyword-face c-type c-decl-type-start)) . -1392) (undo-tree-id238 . -1) (#(" " 0 1 (fontified t)) . -1393) (undo-tree-id239 . -1) 1394 (1388 . 1394) (#("c" 0 1 (fontified t)) . -1388) (undo-tree-id240 . -1) (#("l" 0 1 (fontified t)) . -1389) (undo-tree-id241 . -1) (#("a" 0 1 (fontified t)) . -1390) (undo-tree-id242 . -1) 1391 (#("s" 0 1 (fontified t)) . -1391) (undo-tree-id243 . -1) (#("s" 0 1 (fontified t face font-lock-keyword-face c-type c-decl-type-start)) . -1392) (undo-tree-id244 . -1) (#(" " 0 1 (fontified t)) . -1393) (undo-tree-id245 . -1) 1394 (1388 . 1394) (1386 . 1388)) nil (25987 11286 638780 561000) 0 nil])
([nil nil ((1417 . 1419) (1413 . 1417) (1401 . 1413) (#("i" 0 1 (fontified t)) . -1401) (undo-tree-id231 . -1) (#("s" 0 1 (fontified t)) . -1402) (undo-tree-id232 . -1) 1403 (1401 . 1403) (1399 . 1401) (#(" " 0 1 (fontified nil)) . -1399) (undo-tree-id233 . -1) (#(" " 0 1 (fontified t)) . 1400)) nil (25987 11286 638754 138000) 0 nil])
([nil nil ((1417 . 1418) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1417) (undo-tree-id228 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -1418) (undo-tree-id229 . 1) (undo-tree-id230 . -1) 1419) nil (25987 11286 638748 721000) 0 nil])
([nil nil ((1417 . 1425)) nil (25987 11286 638746 285000) 0 nil])
([nil nil ((1386 . 1388) (#(" " 0 1 (fontified nil)) . -1386) (undo-tree-id227 . -1) (#(" " 0 1 (fontified t)) . 1387)) nil (25987 11286 638745 470000) 0 nil])
([nil nil ((1388 . 1390) (#("  " 0 2 (fontified nil)) . 1387) (undo-tree-id221 . -2) (1387 . 1390) (#("  " 0 2 (fontified nil)) . 1386) (undo-tree-id222 . -2) (1388 . 1389) (#("i" 0 1 (fontified t)) . -1388) (undo-tree-id223 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -1389) (undo-tree-id224 . -1) (#(" " 0 1 (fontified t)) . -1390) (undo-tree-id225 . -1) 1391 (1388 . 1391) (1386 . 1388) (#(" " 0 1 (fontified nil)) . -1386) (undo-tree-id226 . -1) (#(" " 0 1 (fontified t)) . 1387)) nil (25987 11286 638742 909000) 0 nil])
([nil nil ((1411 . 1415) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -1411) (undo-tree-id205 . -1) 1412 (1404 . 1412) (#("c" 0 1 (fontified t)) . -1404) (undo-tree-id206 . -1) (#("h" 0 1 (fontified t)) . -1405) (undo-tree-id207 . -1) (#("a" 0 1 (fontified t)) . -1406) (undo-tree-id208 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -1407) (undo-tree-id209 . -1) (#(" " 0 1 (fontified t)) . -1408) (undo-tree-id210 . -1) (#("*" 0 1 (fontified t)) . -1409) (undo-tree-id211 . -1) (#(" " 0 1 (fontified t)) . -1410) (undo-tree-id212 . -1) 1411 (1410 . 1411) (1409 . 1410) (1408 . 1409) (#(" " 0 1 (fontified t)) . -1408) (undo-tree-id213 . -1) 1409 (1404 . 1409) (#("S" 0 1 (fontified t)) . -1404) (undo-tree-id214 . -1) (#("t" 0 1 (fontified t)) . -1405) (undo-tree-id215 . -1) (#("r" 0 1 (fontified t)) . -1406) (undo-tree-id216 . -1) (#("i" 0 1 (fontified t)) . -1407) (undo-tree-id217 . -1) (#("n" 0 1 (fontified t)) . -1408) (undo-tree-id218 . -1) (#("g" 0 1 (fontified t)) . -1409) (undo-tree-id219 . -1) (#(" " 0 1 (fontified t)) . -1410) (undo-tree-id220 . -1) 1411 (1404 . 1411) (1403 . 1405) (1388 . 1403) (1386 . 1388)) nil (25987 11286 638734 261000) 0 nil])
([nil nil ((1421 . 1425) (#("    " 0 4 (fontified nil)) . 1420) (undo-tree-id203 . -4) (1420 . 1425) (#("    " 0 4 (fontified nil)) . 1419) (undo-tree-id204 . -4) (1419 . 1424) (1418 . 1422) (1417 . 1419) (1416 . 1417)) nil (25987 11286 638723 393000) 0 nil])
([nil nil ((1420 . 1424)) nil (25987 11286 638721 44000) 0 nil])
([nil nil ((1421 . 1425) (#("    " 0 4 (fontified nil)) . 1420) (undo-tree-id201 . -4) (1420 . 1425) (#("    " 0 4 (fontified nil)) . 1419) (undo-tree-id202 . -4) (1423 . 1424) (1419 . 1423)) nil (25987 11286 638719 883000) 0 nil])
([nil nil ((1421 . 1425) (#("   " 0 3 (fontified nil)) . -1421) (undo-tree-id200 . -3) (#(" " 0 1 (fontified t)) . 1424)) nil (25987 11286 638715 596000) 0 nil])
([nil nil ((1421 . 1425) (#("   " 0 3 (fontified nil)) . -1421) (undo-tree-id199 . -3) (#(" " 0 1 (fontified t)) . 1424)) nil (25987 11286 638713 896000) 0 nil])
([nil nil ((731 . 732) (730 . 731) (725 . 730) (#("s" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -725) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -726) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -727) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("d" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -728) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("." 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -729) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("h" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -730) (undo-tree-id198 . -1) 731 (722 . 731) (721 . 722) (713 . 721) (712 . 713) (711 . 712)) nil (25987 11286 638710 720000) 0 nil])
([nil nil ((nil rear-nonsticky nil 712 . 713) (#("
" 0 1 (c-in-sws t fontified nil)) . -732) (712 . 733) (712 . 713)) nil (25987 11286 638701 721000) 0 nil])
([nil nil ((nil rear-nonsticky nil 732 . 733) (#("
" 0 1 (c-in-sws t fontified nil)) . -752) (733 . 753) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 732 . 733) (nil fontified t 732 . 733) (nil c-in-sws t 732 . 733) (732 . 733) 713) nil (25987 11286 638700 258000) 0 nil])
([nil nil ((#("unistd" 0 1 (c-in-sws t fontified t face font-lock-string-face) 1 2 (c-in-sws t fontified t face font-lock-string-face) 2 3 (c-in-sws t fontified t face font-lock-string-face) 3 4 (c-in-sws t fontified t face font-lock-string-face) 4 5 (c-in-sws t fontified t face font-lock-string-face) 5 6 (c-in-sws t fontified t face font-lock-string-face)) . 763) (undo-tree-id187 . -5)) nil (25987 11286 638698 642000) 0 nil])
([nil nil ((763 . 770)) nil (25987 11286 638697 415000) 0 nil])
([nil nil ((#("unistd" 0 1 (c-in-sws t fontified t face font-lock-string-face) 1 2 (c-in-sws t fontified t face font-lock-string-face) 2 3 (c-in-sws t fontified t face font-lock-string-face) 3 4 (c-in-sws t fontified t face font-lock-string-face) 4 5 (c-in-sws t fontified t face font-lock-string-face) 5 6 (c-in-sws t fontified t face font-lock-string-face)) . 743) (undo-tree-id171 . -5) (undo-tree-id172 . -6) (undo-tree-id173 . -6) (undo-tree-id174 . -6) (undo-tree-id175 . -6) (undo-tree-id176 . -6) (undo-tree-id177 . -6) (undo-tree-id178 . -6) (undo-tree-id179 . -6) (undo-tree-id180 . -6) (undo-tree-id181 . -6) (undo-tree-id182 . -6) (undo-tree-id183 . -6) (undo-tree-id184 . -6) (undo-tree-id185 . -6) (undo-tree-id186 . -6)) nil (25987 11286 638695 603000) 0 nil])
([nil nil ((743 . 749)) nil (25987 11286 638677 772000) 0 nil])
([nil nil ((792 . 793) (784 . 792) (783 . 784) (775 . 783) (774 . 775) (773 . 774)) nil (25987 11286 638672 837000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . 746) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (t 25987 11286 647804 782000)) nil (25987 11309 140637 254000) 0 nil])
([nil nil ((#("string " 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t)) . 1486) (undo-tree-id362 . -6) (undo-tree-id363 . -7) (t 25987 11309 147790 420000)) nil (25987 11362 999422 454000) 0 nil])
([nil nil ((1492 . 1493) (1491 . 1492) (1486 . 1491)) nil (25987 11362 999405 564000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1490) (t 25987 11363 11754 51000)) nil (25987 11416 441749 555000) 0 nil])
([nil nil ((#("." 0 1 (c-in-sws t fontified t face font-lock-string-face)) . 789)) nil (25987 11416 441748 295000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . 789)) nil (25987 11416 441746 751000) 0 nil])
([nil nil ((#("char" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face)) . 1484) (undo-tree-id367 . -3) (undo-tree-id368 . -4)) nil (25987 11416 441745 389000) 0 nil])
([nil nil ((#("* " 0 1 (fontified t) 1 2 (fontified t)) . 1484) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -2)) nil (25987 11416 441742 94000) 0 nil])
([nil nil ((1484 . 1491)) nil (25987 11416 441729 332000) 0 nil])
([nil nil ((#("string " 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t)) . 1484) (undo-tree-id370 . -6) (undo-tree-id371 . -6) (t 25987 11416 443715 494000)) nil (25987 11440 742349 788000) 0 nil])
([nil nil ((1489 . 1490) (1488 . 1489) (#(" " 0 1 (fontified t)) . -1488) (undo-tree-id369 . -1) 1489 (1484 . 1489)) nil (25987 11440 742343 874000) 0 nil])
([nil nil ((789 . 791)) nil (25987 11440 742331 603000) 0 nil])
([nil nil ((1501 . 1505) (t 25987 11440 751697 208000)) nil (25987 12321 938718 215000) 0 nil])
([nil nil ((1545 . 1553) (#("O_N" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1545) (undo-tree-id698 . -3) (undo-tree-id699 . -3) (undo-tree-id700 . -3) 1548 (1542 . 1548) (1534 . 1542) (#("O_N" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1534) (undo-tree-id701 . -3) (undo-tree-id702 . -3) (undo-tree-id703 . -3) 1537 (1534 . 1537) (#("O" 0 1 (fontified t)) . -1534) (undo-tree-id704 . -1) (undo-tree-id705 . -1) 1535 (1534 . 1535) (1532 . 1534) (1524 . 1532) (1523 . 1524) (1522 . 1523) (1519 . 1522) (1518 . 1520) (1505 . 1518) (1501 . 1505) (#("   " 0 3 (fontified nil)) . -1501) (undo-tree-id706 . -3) (#(" " 0 1 (fontified t)) . 1504)) nil (25987 12321 938716 216000) 0 nil])
([nil nil ((1557 . 1563) (#("      " 0 6 (fontified nil)) . 1556) (undo-tree-id692 . -6) (1556 . 1563) (#("      " 0 6 (fontified nil)) . 1555) (undo-tree-id693 . -6) (1561 . 1562) (1555 . 1561) (#("   " 0 3 (fontified nil)) . -1555) (undo-tree-id694 . -3) (undo-tree-id695 . -3) (undo-tree-id696 . -3) (undo-tree-id697 . -3) (#(" " 0 1 (fontified t)) . 1558)) nil (25987 12321 938707 898000) 0 nil])
([nil nil ((1554 . 1555)) nil (25987 12321 938703 848000) 0 nil])
([nil nil ((1569 . 1571) (1568 . 1569) (1565 . 1568) (#("i" 0 1 (fontified t)) . -1565) (undo-tree-id689 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -1566) (undo-tree-id690 . -1) 1567 (1565 . 1567) (1564 . 1566) (1561 . 1564) (1557 . 1561) (#("    " 0 4 (fontified nil)) . 1556) (undo-tree-id691 . -4) (1555 . 1561)) nil (25987 12321 938702 589000) 0 nil])
([nil nil ((1568 . 1569) (#("<" 0 1 (fontified t)) . -1568) (undo-tree-id688 . -1) 1569) nil (25987 12321 938699 268000) 0 nil])
([nil nil ((1599 . 1600) (1592 . 1599) (1581 . 1592) (#("is" 0 1 (fontified t) 1 2 (fontified t)) . -1581) (undo-tree-id678 . -2) (undo-tree-id679 . -2) 1583 (1581 . 1583) (1575 . 1581) (1574 . 1580) (1573 . 1575) (#(":" 0 1 (fontified t)) . -1573) (undo-tree-id680 . -1) (#("
" 0 1 (fontified t)) . -1574) (undo-tree-id681 . -1) (#(" " 0 1 (fontified t)) . -1575) (undo-tree-id682 . -1) (#(" " 0 1 (fontified t)) . -1576) (undo-tree-id683 . -1) (#(" " 0 1 (fontified t)) . -1577) (undo-tree-id684 . -1) (#(" " 0 1 (fontified t)) . -1578) (undo-tree-id685 . -1) (#(" " 0 1 (fontified t)) . -1579) (undo-tree-id686 . -1) (#(" " 0 1 (fontified t)) . -1580) (undo-tree-id687 . -1) 1581 (1574 . 1581) (1573 . 1574) (1572 . 1573)) nil (25987 12321 938696 124000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1607)) nil (25987 12321 938687 135000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1607)) nil (25987 12321 938686 495000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 1607) (undo-tree-id677 . -6)) nil (25987 12321 938685 883000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 1607) (undo-tree-id676 . -4)) nil (25987 12321 938684 866000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 1607) (undo-tree-id674 . -4) (undo-tree-id675 . -5)) nil (25987 12321 938683 812000) 0 nil])
([nil nil ((#("= " 0 1 (fontified t) 1 2 (fontified t)) . 1644) (undo-tree-id672 . -1) (undo-tree-id673 . -2)) nil (25987 12321 938682 78000) 0 nil])
([nil nil ((#("false" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t face font-lock-constant-face) 4 5 (fontified t face font-lock-constant-face)) . 1644) (undo-tree-id661 . -4) (undo-tree-id662 . -5) (undo-tree-id663 . -5) (undo-tree-id664 . -5) (undo-tree-id665 . -5) (undo-tree-id666 . -5) (undo-tree-id667 . -5) (undo-tree-id668 . -5) (undo-tree-id669 . -5) (undo-tree-id670 . -5) (undo-tree-id671 . -5)) nil (25987 12321 938680 58000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1606) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) 1607 (1606 . 1607)) nil (25987 12321 938672 904000) 0 nil])
([nil nil ((#("if (fd > 0) {
      is_readable = true;
    }" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-3-face)) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-3-face)) 11 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 14 (fontified t) 14 20 (fontified t) 20 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t face font-lock-constant-face) 35 36 (fontified t face font-lock-constant-face) 36 37 (fontified t face font-lock-constant-face) 37 38 (fontified t face font-lock-constant-face) 38 39 (fontified t) 39 40 (fontified t) 40 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-3-face))) . 1561) (undo-tree-id598 . -44) (undo-tree-id599 . -44) (undo-tree-id600 . -44) (undo-tree-id601 . -20) (undo-tree-id602 . -6) (undo-tree-id603 . -45) (undo-tree-id604 . -45) (undo-tree-id605 . -45) (undo-tree-id606 . -45) (undo-tree-id607 . -45) (undo-tree-id608 . -45) (undo-tree-id609 . -45) (undo-tree-id610 . -45) (undo-tree-id611 . -45) (undo-tree-id612 . -45) (undo-tree-id613 . -45) (undo-tree-id614 . -45) (undo-tree-id615 . -45) (undo-tree-id616 . -45) (undo-tree-id617 . -45) (undo-tree-id618 . -44) (undo-tree-id619 . -44) (undo-tree-id620 . -44) (undo-tree-id621 . -44) (undo-tree-id622 . -44) (undo-tree-id623 . -44) (undo-tree-id624 . -44) (undo-tree-id625 . -45) (undo-tree-id626 . -44) (undo-tree-id627 . -44) (undo-tree-id628 . -44) (undo-tree-id629 . -44) (undo-tree-id630 . -44) (undo-tree-id631 . -44) (undo-tree-id632 . -44) (undo-tree-id633 . -44) (undo-tree-id634 . -44) (undo-tree-id635 . -44) (undo-tree-id636 . -18) (undo-tree-id637 . -18) (undo-tree-id638 . -18) (undo-tree-id639 . -18) (undo-tree-id640 . -18) (undo-tree-id641 . -18) (undo-tree-id642 . -18) (undo-tree-id643 . -45)) nil (25987 12321 938663 75000) 0 nil])
([nil nil ((1582 . 1583) (#("t" 0 1 (fontified t)) . -1582) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("r" 0 1 (fontified t)) . -1583) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) 1584 (1582 . 1584) (1581 . 1582) (1580 . 1581) (1577 . 1580) (#("g" 0 1 (fontified t)) . -1577) (undo-tree-id588 . -1) (undo-tree-id589 . -1) 1578 (1577 . 1578) (1576 . 1578) (#("f" 0 1 (fontified t)) . -1576) (undo-tree-id590 . -1) (undo-tree-id591 . -1) 1577 (1573 . 1577) (1562 . 1573) (#("is_re" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -1562) (undo-tree-id592 . -5) (undo-tree-id593 . -5) (undo-tree-id594 . -2) 1567 (1564 . 1567) (#(" " 0 1 (fontified t)) . -1564) (undo-tree-id595 . -1) 1565 (1562 . 1565) (1558 . 1562) (#("    " 0 4 (fontified nil)) . 1557) (undo-tree-id596 . -4) (1557 . 1562) (#("    " 0 4 (fontified nil)) . 1556) (undo-tree-id597 . -4) (1560 . 1561) (1556 . 1560)) nil (25987 12321 938619 368000) 0 nil])
([nil nil ((1584 . 1585) (t 25987 12321 950801 234000)) nil (25987 12323 183362 707000) 0 nil])
([nil nil ((1644 . 1647) (1632 . 1645) (1630 . 1632) (t 25987 12323 194837 62000)) nil (25987 12377 61974 806000) 0 nil])
([nil nil ((1648 . 1649)) nil (25987 12377 61973 214000) 0 nil])
([nil nil ((1676 . 1677) (1669 . 1676) (1657 . 1669) (#("h" 0 1 (fontified t)) . -1657) (undo-tree-id707 . -1) 1658 (1652 . 1658) (1649 . 1652)) nil (25987 12377 61968 343000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1504) (t 25987 12377 60345 421000)) nil (25987 12406 34978 49000) 0 nil])
([nil nil ((#("int " 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face) 3 4 (fontified t)) . 1504) (undo-tree-id708 . -3)) nil (25987 12406 34975 752000) 0 nil])
([nil nil ((1633 . 1634) (1627 . 1633) (1624 . 1627)) nil (25987 12406 34964 202000) 0 nil])
([nil nil ((1501 . 1505) (#("   " 0 3 (fontified t)) . 1501) 1509 (t 25987 12406 45124 115000)) nil (25987 61292 224411 650000) 0 nil])
([nil nil ((1347 . 1351)) nil (25987 61292 224408 779000) 0 nil])
([nil nil ((1347 . 1351) (#("   " 0 1 (fontified nil c-is-sws t c-in-sws t) 1 3 (fontified nil c-is-sws t c-in-sws t)) . -1347) (undo-tree-id912 . -3) (#(" " 0 1 (fontified t c-is-sws t c-in-sws t)) . 1350)) nil (25987 61292 224406 421000) 0 nil])
([nil nil ((1352 . 1356) (#("   " 0 1 (c-is-sws t c-in-sws t fontified nil) 1 3 (c-is-sws t c-in-sws t fontified nil)) . -1352) (undo-tree-id894 . -3) (undo-tree-id895 . -3) (undo-tree-id896 . -3) (undo-tree-id897 . -3) (undo-tree-id898 . -3) (undo-tree-id899 . -3) (undo-tree-id900 . -3) (undo-tree-id901 . -3) (undo-tree-id902 . -3) (undo-tree-id903 . -3) (undo-tree-id904 . -3) (undo-tree-id905 . -3) (undo-tree-id906 . -3) (undo-tree-id907 . -3) (undo-tree-id908 . -3) (undo-tree-id909 . -3) (undo-tree-id910 . -3) (undo-tree-id911 . -3) (#(" " 0 1 (c-is-sws t c-in-sws t fontified t)) . 1355)) nil (25987 61292 224340 881000) 0 nil])
([nil nil ((1350 . 1354) (#("    " 0 4 (fontified nil c-is-sws t c-in-sws t)) . 1349) (undo-tree-id840 . -4) (undo-tree-id841 . -4) (undo-tree-id842 . -4) (undo-tree-id843 . -4) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (1349 . 1354) (#("    " 0 4 (fontified nil c-is-sws t c-in-sws t)) . 1348) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (1348 . 1353) (#("    " 0 1 (fontified nil c-is-sws t c-in-sws t) 1 4 (fontified nil c-is-sws t c-in-sws t)) . 1347) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (1351 . 1352) (1347 . 1351) (#("   " 0 1 (fontified nil c-is-sws t c-in-sws t) 1 3 (fontified nil c-is-sws t c-in-sws t)) . -1347) (undo-tree-id869 . -3) (undo-tree-id870 . -3) (undo-tree-id871 . -3) (undo-tree-id872 . -3) (undo-tree-id873 . -3) (undo-tree-id874 . -3) (undo-tree-id875 . -3) (undo-tree-id876 . -3) (undo-tree-id877 . -3) (undo-tree-id878 . -3) (undo-tree-id879 . -3) (undo-tree-id880 . -3) (undo-tree-id881 . -3) (undo-tree-id882 . -3) (undo-tree-id883 . -3) (undo-tree-id884 . -3) (undo-tree-id885 . -3) (undo-tree-id886 . -3) (undo-tree-id887 . -3) (undo-tree-id888 . -3) (undo-tree-id889 . -3) (undo-tree-id890 . -3) (undo-tree-id891 . -3) (undo-tree-id892 . -3) (undo-tree-id893 . -3) (#(" " 0 1 (fontified t c-is-sws t c-in-sws t)) . 1350)) nil (25987 61292 224301 318000) 0 nil])
([nil nil ((1363 . 1370) (1360 . 1363) (#(" " 0 1 (fontified t)) . -1360) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) 1361 (1360 . 1361) (1353 . 1360) (#("int3" 0 1 (fontified t c-is-sws t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -1353) (undo-tree-id719 . -4) (undo-tree-id720 . -4) (undo-tree-id721 . -4) (undo-tree-id722 . -2) (undo-tree-id723 . -2) (undo-tree-id724 . -2) (undo-tree-id725 . -2) (undo-tree-id726 . -2) (undo-tree-id727 . -2) (undo-tree-id728 . -2) (undo-tree-id729 . -2) (undo-tree-id730 . -2) (undo-tree-id731 . -3) (undo-tree-id732 . -3) (undo-tree-id733 . -3) (undo-tree-id734 . -3) (undo-tree-id735 . -3) (undo-tree-id736 . -3) (undo-tree-id737 . -3) (undo-tree-id738 . -3) (undo-tree-id739 . -3) (undo-tree-id740 . -3) (undo-tree-id741 . -3) (undo-tree-id742 . -3) (undo-tree-id743 . -3) (undo-tree-id744 . -3) (undo-tree-id745 . -3) (undo-tree-id746 . -3) (undo-tree-id747 . -3) (undo-tree-id748 . -3) (undo-tree-id749 . -3) (undo-tree-id750 . -3) (undo-tree-id751 . -3) (undo-tree-id752 . -3) (undo-tree-id753 . -3) (undo-tree-id754 . -3) (undo-tree-id755 . -3) (undo-tree-id756 . -3) (undo-tree-id757 . -3) (undo-tree-id758 . -3) (undo-tree-id759 . -3) (undo-tree-id760 . -3) (undo-tree-id761 . -3) (undo-tree-id762 . -3) (undo-tree-id763 . -3) (undo-tree-id764 . -3) (undo-tree-id765 . -3) (undo-tree-id766 . -3) (undo-tree-id767 . -3) (undo-tree-id768 . -3) (undo-tree-id769 . -3) (undo-tree-id770 . -3) (undo-tree-id771 . -3) (undo-tree-id772 . -3) (undo-tree-id773 . -3) (undo-tree-id774 . -3) (undo-tree-id775 . -3) (undo-tree-id776 . -3) (undo-tree-id777 . -3) (undo-tree-id778 . -3) (undo-tree-id779 . -3) (undo-tree-id780 . -3) (undo-tree-id781 . -3) (undo-tree-id782 . -3) (undo-tree-id783 . -3) (undo-tree-id784 . -3) (undo-tree-id785 . -3) (undo-tree-id786 . -3) (undo-tree-id787 . -3) (undo-tree-id788 . -3) (undo-tree-id789 . -3) (undo-tree-id790 . -3) (undo-tree-id791 . -3) (undo-tree-id792 . -3) (undo-tree-id793 . -3) (undo-tree-id794 . -3) (undo-tree-id795 . -3) (undo-tree-id796 . -3) (undo-tree-id797 . -3) (undo-tree-id798 . -3) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) (undo-tree-id806 . -4) (undo-tree-id807 . -4) (undo-tree-id808 . -4) (undo-tree-id809 . -4) (undo-tree-id810 . -4) (undo-tree-id811 . -4) (undo-tree-id812 . -4) (undo-tree-id813 . -4) (undo-tree-id814 . -4) (undo-tree-id815 . -4) (undo-tree-id816 . -4) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -4) 1357 (1353 . 1357) (#("i" 0 1 (fontified t c-is-sws t)) . -1353) (undo-tree-id823 . -1) (#("n" 0 1 (fontified t)) . -1354) (undo-tree-id824 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1355) (undo-tree-id825 . -1) (#(" " 0 1 (fontified t)) . -1356) (undo-tree-id826 . -1) 1357 (1356 . 1357) (1353 . 1356) (#("l" 0 1 (fontified t c-is-sws t)) . -1353) (undo-tree-id827 . -1) (#("t" 0 1 (fontified t)) . -1354) (undo-tree-id828 . -1) (#(" " 0 1 (fontified t)) . -1355) (undo-tree-id829 . -1) 1356 (1353 . 1356) (#("f" 0 1 (fontified t c-is-sws t)) . -1353) (undo-tree-id830 . -1) (#("o" 0 1 (fontified t)) . -1354) (undo-tree-id831 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -1355) (undo-tree-id832 . -1) (#(" " 0 1 (fontified t)) . -1356) (undo-tree-id833 . -1) 1357 (1353 . 1357) (1349 . 1353) (#("   " 0 3 (fontified t c-is-sws t c-in-sws t)) . -1349) (undo-tree-id834 . -3) 1352 (#(" " 0 1 (fontified t c-is-sws t c-in-sws t)) . -1352) (undo-tree-id835 . -1) (#("f" 0 1 (fontified t c-is-sws t)) . -1353) (undo-tree-id836 . -1) (#("o" 0 1 (fontified t)) . -1354) (undo-tree-id837 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -1355) (undo-tree-id838 . -1) (#(" " 0 1 (fontified t)) . -1356) (undo-tree-id839 . -1) 1357 (1353 . 1357) (1349 . 1353)) nil (25987 61292 224154 314000) 0 nil])
([nil nil ((1384 . 1385) (1376 . 1384) (1375 . 1376) (1370 . 1375)) nil (25987 61292 223791 504000) 0 nil])
([nil nil ((1369 . 1371) (t 25987 61292 240573 257000)) nil (25987 61378 402443 866000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . 1369) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1)) nil (25987 61378 402433 230000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 1369) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1)) nil (25987 61378 401977 356000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 1368) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1)) nil (25987 61378 401951 123000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 1368) (undo-tree-id913 . 1) (undo-tree-id914 . -1) (undo-tree-id915 . -1)) nil (25987 61378 401686 737000) 0 nil])
([nil nil ((1368 . 1369)) nil (25987 61378 401657 844000) 0 nil])
([nil nil ((apply -21 1476 1657 undo--wrap-and-run-primitive-undo 1476 1657 ((1647 . 1650) (1611 . 1614) (1555 . 1558) (1519 . 1522) (1508 . 1511) (1502 . 1505) (1477 . 1480) 1476)) (t 25987 61378 417818 329000)) nil (25987 61407 329676 431000) 0 nil])
([nil nil ((apply -18 1655 1772 undo--wrap-and-run-primitive-undo 1655 1772 ((1765 . 1768) (1731 . 1734) (1708 . 1711) (1695 . 1698) (1671 . 1674) (1659 . 1662) 1655)) (t 25987 61407 346233 176000)) nil (25987 61450 450546 449000) 0 nil])
([nil nil ((#("    int32_t buttons* = msg.buttons;
" 0 4 (fontified t c-is-sws t c-in-sws t) 4 5 (c-is-sws t fontified t) 5 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t face font-lock-type-face) 13 14 (fontified t face font-lock-type-face) 14 15 (fontified t face font-lock-type-face) 15 16 (fontified t face font-lock-type-face) 16 17 (fontified t face font-lock-type-face) 17 18 (fontified t face font-lock-type-face) 18 19 (fontified t c-type c-decl-id-start face font-lock-type-face) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t)) . 1349) (undo-tree-id1513 . -35) (undo-tree-id1514 . -35) (undo-tree-id1515 . 16) (undo-tree-id1516 . -4) (undo-tree-id1517 . -34) (undo-tree-id1518 . -35) (undo-tree-id1519 . -35) (undo-tree-id1520 . -35) (undo-tree-id1521 . -35) (undo-tree-id1522 . -35) (undo-tree-id1523 . -35) (undo-tree-id1524 . -35) (undo-tree-id1525 . -35) (undo-tree-id1526 . -35) (undo-tree-id1527 . -35) (undo-tree-id1528 . -35) (undo-tree-id1529 . -35) (undo-tree-id1530 . -35) (undo-tree-id1531 . -35) (undo-tree-id1532 . -35) (undo-tree-id1533 . -35) (undo-tree-id1534 . -35) (undo-tree-id1535 . -34) (undo-tree-id1536 . -34) (undo-tree-id1537 . -34) (undo-tree-id1538 . -34) (undo-tree-id1539 . -34) (undo-tree-id1540 . -34) (undo-tree-id1541 . -34) (undo-tree-id1542 . -34) (undo-tree-id1543 . -34) (undo-tree-id1544 . -34) (undo-tree-id1545 . -34) (undo-tree-id1546 . -34) (undo-tree-id1547 . -34) (undo-tree-id1548 . -34) (undo-tree-id1549 . -34) (undo-tree-id1550 . -34) (undo-tree-id1551 . -34) (undo-tree-id1552 . -34) (undo-tree-id1553 . -34) (undo-tree-id1554 . -36) 1383 (t 25987 61450 458848 820000)) nil (25987 61560 745516 67000) 0 nil])
([nil nil ((1384 . 1390) (#("      " 0 6 (fontified nil)) . 1383) (undo-tree-id1499 . -6) (undo-tree-id1500 . -6) (undo-tree-id1501 . -6) (undo-tree-id1502 . -6) (undo-tree-id1503 . -6) (undo-tree-id1504 . -6) (undo-tree-id1505 . -6) (undo-tree-id1506 . -6) (undo-tree-id1507 . -6) (undo-tree-id1508 . -6) (1383 . 1390) (1382 . 1388) (1381 . 1383) (1380 . 1381) (1375 . 1379) (1374 . 1375) (#(" " 0 1 (fontified t)) . -1374) (undo-tree-id1509 . -1) 1375 (1372 . 1375) (1371 . 1372) (1368 . 1371) (1367 . 1368) (#(" " 0 1 (fontified t)) . -1367) (undo-tree-id1510 . -1) 1368 (1358 . 1368) (1357 . 1359) (1353 . 1357) (1349 . 1353) (#("   " 0 3 (fontified nil c-is-sws t c-in-sws t)) . -1349) (undo-tree-id1511 . 3) (undo-tree-id1512 . -3) (#(" " 0 1 (fontified t c-is-sws t c-in-sws t)) . 1352)) nil (25987 61560 745425 960000) 0 nil])
([nil nil ((1381 . 1387) (#(" " 0 1 (fontified nil)) . 1380) (undo-tree-id1498 . -1) (1381 . 1382)) nil (25987 61560 745340 151000) 0 nil])
([nil nil ((1397 . 1403) (#("    " 0 4 (fontified t)) . -1397) (undo-tree-id1482 . -4) (undo-tree-id1483 . -4) (undo-tree-id1484 . -4) (undo-tree-id1485 . -4) (undo-tree-id1486 . -4) (undo-tree-id1487 . -4) (undo-tree-id1488 . -4) (undo-tree-id1489 . -4) (undo-tree-id1490 . -4) (undo-tree-id1491 . -4) (undo-tree-id1492 . -4) (undo-tree-id1493 . -4) (undo-tree-id1494 . -4) (undo-tree-id1495 . -4) (undo-tree-id1496 . -4) (undo-tree-id1497 . -4) 1401) nil (25987 61560 745334 22000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1391) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (#("n" 0 1 (fontified t)) . -1392) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1393) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (#(" " 0 1 (fontified t)) . -1394) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) 1395 (1391 . 1395) (1390 . 1391) (#("	" 0 1 (fontified nil)) . 1389) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (1390 . 1391) (1389 . 1390)) nil (25987 61560 745278 327000) 0 nil])
([nil nil ((1416 . 1417) (1408 . 1417) (1407 . 1408) (1403 . 1407) (1402 . 1404) (1391 . 1402) (#("R" 0 1 (fontified t)) . -1391) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (#("C" 0 1 (fontified t)) . -1392) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (#("L" 0 1 (fontified t)) . -1393) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) 1394 (1391 . 1394) (1390 . 1391) (#("	" 0 1 (fontified nil)) . 1389) (undo-tree-id1165 . -1) (1390 . 1391) (1389 . 1390)) nil (25987 61560 744565 700000) 0 nil])
([nil nil ((1419 . 1420)) nil (25987 61560 744548 775000) 0 nil])
([nil nil ((1419 . 1421) (1409 . 1419) (1408 . 1409) (1403 . 1408)) nil (25987 61560 744545 635000) 0 nil])
([nil nil ((1428 . 1429) (1427 . 1428) (1427 . 1428) (1425 . 1426) (#("s" 0 1 (fontified t face font-lock-string-face)) . -1425) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) 1426 (1424 . 1426) (#("&" 0 1 (fontified t face font-lock-string-face)) . -1424) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) 1425 (1424 . 1425) (1424 . 1425) (nil syntax-table nil 1441 . 1442) (nil syntax-table (1) 1423 . 1424) (1423 . 1424) (#("\"" 0 1 (fontified nil)) . -1423) (nil syntax-table nil 1441 . 1442) (nil syntax-table (1) 1423 . 1424) (1422 . 1424) (1421 . 1422)) nil (25987 61560 744530 689000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 1433) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (t 25987 61560 784411 603000)) nil (25987 61587 74202 120000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . 1433) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1)) nil (25987 61587 74190 484000) 0 nil])
([nil nil ((1433 . 1434)) nil (25987 61587 74159 133000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1584 . 1585) (nil fontified nil 1465 . 1585) (1465 . 1585) 1464 (t 25987 61587 88781 821000)) nil (25987 61682 779256 229000) 0 nil])
([nil nil ((#("buttons" 0 7 (fontified t)) . 1551) (undo-tree-id1567 . -6)) nil (25987 61682 779252 600000) 0 nil])
([nil nil ((1552 . 1555) (#("z" 0 1 (fontified t)) . -1552) (undo-tree-id1566 . -1) 1553 (1551 . 1553)) nil (25987 61682 779244 749000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 1449) (undo-tree-id1564 . -6) (undo-tree-id1565 . -5) 1454) nil (25987 61682 779238 725000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1447) (undo-tree-id1563 . -1)) nil (25987 61682 779232 170000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1389)) nil (25987 61682 779228 275000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1496)) nil (25987 61682 779226 226000) 0 nil])
([nil nil ((#("	
" 0 2 (fontified t)) . 1550) (undo-tree-id1562 . -1)) nil (25987 61682 779222 781000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 1550) (undo-tree-id1559 . -6) (undo-tree-id1560 . -6) (undo-tree-id1561 . -7)) nil (25987 61682 779211 561000) 0 nil])
([nil nil ((1531 . 1532) (#("i" 0 1 (fontified t face font-lock-string-face)) . 1531) (undo-tree-id1568 . -1) (t 25987 61682 822122 537000)) nil (25987 61749 8102 841000) 0 nil])
([nil nil ((apply -32 1348 1592 undo--wrap-and-run-primitive-undo 1348 1592 ((1583 . 1586) (1522 . 1525) (1522 . 1523) (#("	" 0 1 (fontified t)) . 1522) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (#<marker at 1825 in subscriber_member_function.cpp> . -1) (1518 . 1522) (1511 . 1514) (1476 . 1479) (1463 . 1466) (1399 . 1402) (1399 . 1400) (#("	" 0 1 (fontified t)) . 1399) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (#<marker at 1702 in subscriber_member_function.cpp> . -1) (1395 . 1399) (1388 . 1391) (1353 . 1356) 1348)) (t 25987 61749 15044 131000)) nil (25987 62722 658375 482000) 0 nil])
([nil nil ((1593 . 1597) (#("    " 0 4 (fontified nil c-is-sws t c-in-sws t)) . 1592) (undo-tree-id1618 . -4) (undo-tree-id1619 . -4) (undo-tree-id1620 . -4) (undo-tree-id1621 . -4) (undo-tree-id1622 . -4) (undo-tree-id1623 . -4) (undo-tree-id1624 . -4) (undo-tree-id1625 . -4) (undo-tree-id1626 . -4) (undo-tree-id1627 . -4) (1592 . 1597) (#("    " 0 4 (fontified nil c-is-sws t c-in-sws t)) . 1591) (undo-tree-id1628 . -4) (undo-tree-id1629 . -4) (undo-tree-id1630 . -4) (undo-tree-id1631 . -4) (undo-tree-id1632 . -4) (undo-tree-id1633 . -4) (undo-tree-id1634 . -4) (undo-tree-id1635 . -4) (undo-tree-id1636 . -4) (undo-tree-id1637 . -4) (1591 . 1596) (#("    " 0 1 (fontified nil c-is-sws t c-in-sws t) 1 4 (fontified nil c-is-sws t c-in-sws t)) . 1590) (undo-tree-id1638 . -4) (undo-tree-id1639 . -4) (undo-tree-id1640 . -4) (undo-tree-id1641 . -4) (undo-tree-id1642 . -4) (undo-tree-id1643 . -4) (undo-tree-id1644 . -4) (undo-tree-id1645 . -4) (undo-tree-id1646 . -4) (undo-tree-id1647 . -4) (1594 . 1595) (1590 . 1594) (#("       " 0 2 (fontified t c-in-sws t c-is-sws t) 2 3 (fontified t c-is-sws t c-in-sws t) 3 4 (rear-nonsticky t fontified t c-in-sws t c-is-sws t) 4 7 (fontified t c-in-sws t c-is-sws t)) . 1590) (undo-tree-id1648 . -1) (undo-tree-id1649 . 5) (undo-tree-id1650 . -1) (undo-tree-id1651 . -6) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1)) nil (25987 62722 658366 298000) 0 nil])
([nil nil ((1621 . 1626) (1620 . 1621) (1618 . 1619) (1609 . 1619) (#("b" 0 1 (fontified t)) . -1609) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (#("s" 0 1 (fontified t)) . -1610) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (#("g" 0 1 (fontified t)) . -1611) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) 1612 (1609 . 1612) (1601 . 1609) (#("3" 0 1 (fontified t)) . -1601) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (#("2" 0 1 (fontified t)) . -1602) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) 1603 (1601 . 1603) (#(" " 0 1 (fontified t)) . -1601) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (#("3" 0 1 (fontified t)) . -1602) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (#("2" 0 1 (fontified t)) . -1603) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) 1604 (1602 . 1604) (1596 . 1602) (#("f" 0 1 (fontified t c-is-sws t)) . -1596) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (#("3" 0 1 (fontified t)) . -1597) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (#("2" 0 1 (fontified t)) . -1598) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) 1599 (1596 . 1599) (#("f" 0 1 (fontified t c-is-sws t)) . -1596) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (#("l" 0 1 (fontified t)) . -1597) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (#("o" 0 1 (fontified t)) . -1598) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) 1599 (1596 . 1599) (#("f" 0 1 (fontified t c-is-sws t)) . -1596) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (#("l" 0 1 (fontified t)) . -1597) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (#("o" 0 1 (fontified t)) . -1598) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (#("a" 0 1 (fontified t)) . -1599) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1600) (undo-tree-id1607 . -1) (#(" " 0 1 (fontified t)) . -1601) (undo-tree-id1608 . -1) 1602 (1601 . 1602) (#(" " 0 1 (fontified t)) . -1601) (undo-tree-id1609 . -1) 1602 (1596 . 1602) (#("i" 0 1 (fontified t c-is-sws t)) . -1596) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (#("n" 0 1 (fontified t)) . -1597) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1598) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (#(" " 0 1 (fontified t)) . -1599) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) 1600 (1596 . 1600) (1592 . 1596)) nil (25987 62722 658253 404000) 0 nil])
([nil nil ((1613 . 1614) (1612 . 1613) (1609 . 1612)) nil (25987 62723 236446 434000) 0 nil])
([nil nil ((1625 . 1626) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1625) (1625 . 1626) (t 25987 62724 224352 400000)) nil (25987 62758 867815 356000) 0 nil] [nil nil ((1625 . 1626) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1625) (1625 . 1626)) ((#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 1625) (1625 . 1626) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 1625)) (25987 62722 661882 727000) 0 nil])
([nil nil ((1609 . 1610)) nil (25987 62758 867812 503000) 0 nil])
([nil nil ((1609 . 1610)) ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 1609)) (25987 62722 658085 627000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 1609) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1)) nil (25987 62758 867809 932000) 0 nil])
nil
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 1625) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1)) nil (25987 62758 867803 434000) 0 nil])
([nil nil ((1611 . 1613)) nil (25987 62758 867782 15000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1632 . 1633) (#("
" 0 1 (fontified nil)) . -1665) (1628 . 1666) 1612) nil (25987 62758 867779 617000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1669 . 1670) (#("
" 0 1 (fontified nil)) . -1702) (1665 . 1703) 1633) nil (25987 62758 867776 503000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1706 . 1707) (#("
" 0 1 (fontified nil)) . -1739) (1702 . 1740) 1670) nil (25987 62758 867772 949000) 0 nil])
([nil nil ((1642 . 1643) (#("x" 0 1 (fontified t face font-lock-variable-name-face)) . 1642) (undo-tree-id1707 . -1)) nil (25987 62758 867769 626000) 0 nil])
([nil nil ((#("valx " 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t face font-lock-variable-name-face) 2 3 (fontified t face font-lock-variable-name-face) 3 4 (fontified t face font-lock-variable-name-face) 4 5 (fontified t)) . 1676) (undo-tree-id1698 . -4) (undo-tree-id1699 . -3) (undo-tree-id1700 . -3) (undo-tree-id1701 . -3) (undo-tree-id1702 . -3) (undo-tree-id1703 . -3) (undo-tree-id1704 . -3) (undo-tree-id1705 . -3) (undo-tree-id1706 . -5)) nil (25987 62758 867764 959000) 0 nil])
([nil nil ((1676 . 1681)) nil (25987 62758 867749 244000) 0 nil])
([nil nil ((#("valx " 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t face font-lock-variable-name-face) 2 3 (fontified t face font-lock-variable-name-face) 3 4 (fontified t face font-lock-variable-name-face) 4 5 (fontified t)) . 1713) (undo-tree-id1689 . -4) (undo-tree-id1690 . -4) (undo-tree-id1691 . -4) (undo-tree-id1692 . -4) (undo-tree-id1693 . -4) (undo-tree-id1694 . -4) (undo-tree-id1695 . -4) (undo-tree-id1696 . -4) (undo-tree-id1697 . -5)) nil (25987 62758 867745 881000) 0 nil])
([nil nil ((1714 . 1718) (1713 . 1714) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -1713) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -1714) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -1715) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -1716) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (#("w" 0 1 (fontified t face font-lock-variable-name-face)) . -1717) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (#(" " 0 1 (fontified t)) . -1718) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) 1719 (1715 . 1719) (#("w" 0 1 (fontified t face font-lock-variable-name-face)) . -1715) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) 1716 (1713 . 1716)) nil (25987 62758 871359 732000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 1719) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (#("1" 0 1 (fontified t)) . 1683) (undo-tree-id1836 . -1) (#("1" 0 1 (fontified t)) . 1647) (undo-tree-id1837 . -1) 1721) nil (25987 62766 836420 656000) 0 nil] [nil nil ((1647 . 1648)) ((#("
" 0 1 (fontified t)) . 1647) (undo-tree-id1721 . -1)) (25987 62758 867667 677000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 1716) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (#("-" 0 1 (fontified t)) . 1681) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (#("-" 0 1 (fontified t)) . 1646) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) 1718) nil (25987 62766 836376 403000) 0 nil])
nil
([nil nil ((#(".0 * " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 1706) (undo-tree-id1722 . -4) (undo-tree-id1723 . -4) (undo-tree-id1724 . -4) (undo-tree-id1725 . -4) (undo-tree-id1726 . -5) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -2) (undo-tree-id1735 . -2) (undo-tree-id1736 . -2) (undo-tree-id1737 . -2) (undo-tree-id1738 . -2) (undo-tree-id1739 . -2) (undo-tree-id1740 . -2) (undo-tree-id1741 . -3) (undo-tree-id1742 . -3) (undo-tree-id1743 . -3) (undo-tree-id1744 . -3) (undo-tree-id1745 . -3) (undo-tree-id1746 . -3) (undo-tree-id1747 . -3) (undo-tree-id1748 . -4) (undo-tree-id1749 . -4) (undo-tree-id1750 . -4) (undo-tree-id1751 . -4) (undo-tree-id1752 . -4) (undo-tree-id1753 . -4) (undo-tree-id1754 . -4) (undo-tree-id1755 . -4) (undo-tree-id1756 . -5) (undo-tree-id1757 . -5) (#(".0 * " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 1676) (undo-tree-id1758 . -5) (#(".0 * " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 1646) (undo-tree-id1759 . -5) 1720) nil (25987 62766 836141 351000) 0 nil])
([nil nil ((1721 . 1725) (#("    " 0 4 (fontified nil)) . 1720) (undo-tree-id2263 . -4) (1720 . 1725) (#(" " 0 1 (fontified nil)) . 1720) (#("   " 0 3 (fontified nil)) . 1719) (undo-tree-id2264 . -3) (1722 . 1723) (t 25987 62766 876928 701000)) nil (25987 62861 378260 19000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1729 . 1730) (#("
" 0 1 (face font-lock-comment-face c-in-sws t fontified nil)) . -1786) (1725 . 1787) 1724) nil (25987 62861 378252 645000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1790 . 1791) (#("
" 0 1 (face font-lock-comment-face c-in-sws t fontified nil)) . -1847) (1786 . 1848) 1730) nil (25987 62861 378248 995000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1851 . 1852) (#("
" 0 1 (face font-lock-comment-face c-in-sws t fontified nil)) . -1908) (1847 . 1909) 1791) nil (25987 62861 378246 2000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1912 . 1913) (#("
" 0 1 (face font-lock-comment-face c-in-sws t fontified nil)) . -1969) (1908 . 1970) 1852) nil (25987 62861 378242 465000) 0 nil])
([nil nil ((#("//" 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face c-is-sws t) 1 2 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 1907) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (#("//" 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face c-is-sws t) 1 2 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 1848) (#("//" 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face c-is-sws t) 1 2 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 1789) (#("//" 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 2 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 1730) 1914) nil (25987 62861 378238 332000) 0 nil])
([nil nil ((1726 . 1730) (#("     	" 0 3 (c-in-sws t c-is-sws t fontified t) 3 4 (fontified t rear-nonsticky t) 4 5 (fontified t) 5 6 (fontified t)) . 1726) (undo-tree-id2255 . -4) (undo-tree-id2256 . -4) (undo-tree-id2257 . -4) (undo-tree-id2258 . -4) 1730) nil (25987 62861 378227 799000) 0 nil])
([nil nil ((1783 . 1787) (#("     	" 0 1 (fontified t c-in-sws t) 1 3 (c-in-sws t fontified t) 3 4 (fontified t rear-nonsticky t) 4 5 (fontified t) 5 6 (fontified t)) . 1783) (undo-tree-id2254 . -4) 1787) nil (25987 62861 378219 555000) 0 nil])
([nil nil ((1840 . 1844) (#("     	" 0 1 (fontified t c-in-sws t) 1 3 (c-in-sws t fontified t) 3 4 (fontified t rear-nonsticky t) 4 5 (fontified t) 5 6 (fontified t)) . 1840) (undo-tree-id2253 . -4) 1844) nil (25987 62861 378215 435000) 0 nil])
([nil nil ((1897 . 1901) (#("     	" 0 1 (c-in-sws t fontified t) 1 3 (c-in-sws t fontified t) 3 4 (fontified t rear-nonsticky t) 4 5 (fontified t) 5 6 (fontified t)) . 1897) (undo-tree-id2248 . -4) (undo-tree-id2249 . 2) (undo-tree-id2250 . -4) (undo-tree-id2251 . -3) (undo-tree-id2252 . -4) 1901) nil (25987 62861 378210 451000) 0 nil])
([nil nil ((1959 . 1963)) nil (25987 62861 378201 79000) 0 nil])
([nil nil ((1954 . 1958) (#("   " 0 1 (c-in-sws t fontified nil) 1 3 (c-in-sws t fontified nil)) . -1954) (undo-tree-id2246 . -3) (undo-tree-id2247 . -3) (#(" " 0 1 (c-in-sws t fontified t)) . 1957)) nil (25987 62861 378198 622000) 0 nil])
([nil nil ((#("axes" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 1773) (undo-tree-id2245 . -3)) nil (25987 62861 378193 16000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 1773)) nil (25987 62861 378189 745000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 1772)) nil (25987 62861 378187 787000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 1772)) nil (25987 62861 378186 106000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 1772)) nil (25987 62861 378184 179000) 0 nil])
([nil nil ((#(".axes[i]" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-4-face)) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-4-face))) . 1919) (undo-tree-id2241 . -7) (undo-tree-id2242 . -7) (undo-tree-id2243 . -7) (undo-tree-id2244 . -7) (#(".axes[i]" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-4-face)) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-4-face))) . 1870) (#(".axes[i]" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-4-face)) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-4-face))) . 1821) 1942) nil (25987 62861 378181 101000) 0 nil])
([nil nil ((#("msg" 0 3 (fontified t)) . 1907) (undo-tree-id2234 . -2) (undo-tree-id2235 . -2) (undo-tree-id2236 . -2) (undo-tree-id2237 . -2) (undo-tree-id2238 . -3) (undo-tree-id2239 . -2) (undo-tree-id2240 . -3) (#("msg" 0 3 (fontified t)) . 1861) (#("msg" 0 3 (fontified t)) . 1815) (#("msg" 0 3 (fontified t)) . 1769) 1918) nil (25987 62861 378171 278000) 0 nil])
([nil nil ((1911 . 1915) (1863 . 1867) (1815 . 1819) (1767 . 1771) (#("  " 0 2 (fontified t)) . 1899) (undo-tree-id2180 . -2) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -2) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -2) (undo-tree-id2193 . -2) (#("  " 0 2 (fontified t)) . 1855) (undo-tree-id2194 . -2) (#("  " 0 2 (fontified t)) . 1811) (undo-tree-id2195 . -2) (#("  " 0 2 (fontified t)) . 1767) (undo-tree-id2196 . 1) (undo-tree-id2197 . -2) (undo-tree-id2198 . -2) (undo-tree-id2199 . -2) (undo-tree-id2200 . -2) (undo-tree-id2201 . -2) (undo-tree-id2202 . -2) (undo-tree-id2203 . -2) (undo-tree-id2204 . -2) (undo-tree-id2205 . -2) (undo-tree-id2206 . -2) (undo-tree-id2207 . -2) (undo-tree-id2208 . -2) (undo-tree-id2209 . -2) (undo-tree-id2210 . -2) (undo-tree-id2211 . -2) (undo-tree-id2212 . -2) (undo-tree-id2213 . -2) (undo-tree-id2214 . -2) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -2) 1907) nil (25987 62861 378150 192000) 0 nil])
([nil nil ((1767 . 1768)) nil (25987 62861 378061 908000) 0 nil])
([nil nil ((1816 . 1817)) nil (25987 62861 378060 430000) 0 nil])
([nil nil ((1865 . 1866)) nil (25987 62861 378058 416000) 0 nil])
([nil nil ((1914 . 1915)) nil (25987 62861 378056 835000) 0 nil])
([nil nil ((1768 . 1769) (1767 . 1768) (1763 . 1767)) nil (25987 62861 378054 595000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1817) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) 1818 (1817 . 1818)) nil (25987 62861 378046 91000) 0 nil])
([nil nil ((1823 . 1824) (1822 . 1823) (1818 . 1822)) nil (25987 62861 377944 994000) 0 nil])
([nil nil ((1878 . 1879) (1877 . 1878) (#(" " 0 1 (fontified t face font-lock-string-face)) . -1877) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) 1878 (1874 . 1878) (#("a" 0 1 (fontified t face font-lock-string-face)) . -1874) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) 1875 (1873 . 1875) (#("v" 0 1 (fontified t face font-lock-string-face)) . -1873) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -1874) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -1875) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) 1876 (1873 . 1876)) nil (25987 62861 377915 807000) 0 nil])
([nil nil ((1933 . 1934) (1932 . 1933) (#(" " 0 1 (fontified t face font-lock-string-face)) . -1932) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) 1933 (1931 . 1933) (#("w" 0 1 (fontified t face font-lock-string-face)) . -1931) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -1932) (undo-tree-id1850 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -1933) (undo-tree-id1851 . -1) 1934 (1933 . 1934) (1928 . 1933)) nil (25987 62861 377369 758000) 0 nil])
([nil nil ((1655 . 1656) (#("0" 0 1 (fontified t)) . 1655) (undo-tree-id2267 . -1) (t 25987 62861 418866 501000)) nil (25987 63099 221016 503000) 0 nil])
([nil nil ((1685 . 1686) (#("0" 0 1 (fontified t)) . 1685) (undo-tree-id2266 . -1)) nil (25987 63099 221009 457000) 0 nil])
([nil nil ((1715 . 1716) (#("0" 0 1 (fontified t)) . 1715) (undo-tree-id2265 . -1)) nil (25987 63239 726739 333000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1199) (undo-tree-id2354 . -2) (undo-tree-id2355 . -2) (undo-tree-id2356 . -2) (undo-tree-id2357 . -2) (undo-tree-id2358 . -2) (undo-tree-id2359 . -2) (undo-tree-id2360 . -2) (undo-tree-id2361 . -2) (undo-tree-id2362 . -2) (undo-tree-id2363 . -2) 1201 (1199 . 1201) (#("  " 0 2 (fontified nil)) . 1198) (undo-tree-id2364 . -2) (undo-tree-id2365 . -2) (undo-tree-id2366 . -2) (undo-tree-id2367 . -2) (undo-tree-id2368 . -2) (undo-tree-id2369 . -2) (undo-tree-id2370 . -2) (undo-tree-id2371 . -2) (undo-tree-id2372 . -2) (undo-tree-id2373 . -2) (1197 . 1201) (t 25987 63099 265119 614000)) nil (25987 63257 40479 12000) 0 nil] [nil nil ((1669 . 1671) (1647 . 1649) (1625 . 1627) (1596 . 1598) (#("float nyaw" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 4 (fontified t face font-lock-type-face) 4 5 (fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (fontified t) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face)) . 1663) (undo-tree-id2268 . -10) (undo-tree-id2269 . -9) (undo-tree-id2270 . -9) (undo-tree-id2271 . -9) (undo-tree-id2272 . -10) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -2) (undo-tree-id2281 . -2) (undo-tree-id2282 . -2) (undo-tree-id2283 . -2) (undo-tree-id2284 . -2) (undo-tree-id2285 . -2) (undo-tree-id2286 . -2) (undo-tree-id2287 . -3) (undo-tree-id2288 . -3) (undo-tree-id2289 . -3) (undo-tree-id2290 . -3) (undo-tree-id2291 . -3) (undo-tree-id2292 . -3) (undo-tree-id2293 . -3) (undo-tree-id2294 . -4) (undo-tree-id2295 . -4) (undo-tree-id2296 . -4) (undo-tree-id2297 . -4) (undo-tree-id2298 . -4) (undo-tree-id2299 . -4) (undo-tree-id2300 . -4) (undo-tree-id2301 . -5) (undo-tree-id2302 . -5) (undo-tree-id2303 . -5) (undo-tree-id2304 . -5) (undo-tree-id2305 . -5) (undo-tree-id2306 . -5) (undo-tree-id2307 . -5) (undo-tree-id2308 . -6) (undo-tree-id2309 . -6) (undo-tree-id2310 . -6) (undo-tree-id2311 . -6) (undo-tree-id2312 . -6) (undo-tree-id2313 . -6) (undo-tree-id2314 . -6) (undo-tree-id2315 . -7) (undo-tree-id2316 . -7) (undo-tree-id2317 . -7) (undo-tree-id2318 . -7) (undo-tree-id2319 . -7) (undo-tree-id2320 . -7) (undo-tree-id2321 . -7) (undo-tree-id2322 . -8) (undo-tree-id2323 . -8) (undo-tree-id2324 . -8) (undo-tree-id2325 . -8) (undo-tree-id2326 . -8) (undo-tree-id2327 . -8) (undo-tree-id2328 . -8) (undo-tree-id2329 . -9) (undo-tree-id2330 . -9) (undo-tree-id2331 . -9) (undo-tree-id2332 . -9) (undo-tree-id2333 . -9) (undo-tree-id2334 . -9) (undo-tree-id2335 . -9) (undo-tree-id2336 . -10) (undo-tree-id2337 . -10) (#("float pyaw" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 4 (fontified t face font-lock-type-face) 4 5 (fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (fontified t) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face)) . 1643) (undo-tree-id2338 . -10) (#("float valy" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 4 (fontified t face font-lock-type-face) 4 5 (fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (fontified t) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face)) . 1623) (undo-tree-id2339 . -10) (#("float valx" 0 1 (fontified t c-is-sws t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 4 (fontified t face font-lock-type-face) 4 5 (fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (fontified t) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face)) . 1596) (undo-tree-id2340 . -10) 1703 (t 25987 63099 265119 614000)) ((1596 . 1606) (1623 . 1633) (1643 . 1653) (1663 . 1673) (#("  " 0 2 (c-is-sws t c-in-sws t fontified t)) . 1596) (#("  " 0 2 (fontified t)) . 1625) (#("  " 0 2 (fontified t)) . 1647) (#("  " 0 2 (fontified t)) . 1669) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1)) (25987 63239 709529 610000) 0 nil])
([nil nil ((1202 . 1204) (#("  " 0 2 (fontified nil)) . 1201) (undo-tree-id2509 . -2) (undo-tree-id2510 . -2) (undo-tree-id2511 . -2) (undo-tree-id2512 . -2) (undo-tree-id2513 . -2) (undo-tree-id2514 . -2) (undo-tree-id2515 . -2) (undo-tree-id2516 . -2) (undo-tree-id2517 . -2) (undo-tree-id2518 . -2) (1201 . 1204) (#("  " 0 2 (fontified nil)) . 1200) (undo-tree-id2519 . -2) (undo-tree-id2520 . -2) (undo-tree-id2521 . -2) (undo-tree-id2522 . -2) (undo-tree-id2523 . -2) (undo-tree-id2524 . -2) (undo-tree-id2525 . -2) (undo-tree-id2526 . -2) (undo-tree-id2527 . -2) (undo-tree-id2528 . -2) (1200 . 1203) (#("  " 0 2 (fontified nil)) . 1199) (undo-tree-id2529 . -2) (undo-tree-id2530 . -2) (undo-tree-id2531 . -2) (undo-tree-id2532 . -2) (undo-tree-id2533 . -2) (undo-tree-id2534 . -2) (undo-tree-id2535 . -2) (undo-tree-id2536 . -2) (undo-tree-id2537 . -2) (undo-tree-id2538 . -2) (1198 . 1202)) nil (25987 63270 753399 605000) 0 nil] [nil nil ((nil rear-nonsticky nil 1198 . 1199) (1297 . 1308) (1223 . 1234) (1210 . 1221) (1198 . 1209)) ((#(" float valx" 0 1 (fontified nil rear-nonsticky nil) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face) 3 5 (fontified nil face font-lock-type-face) 5 6 (fontified nil c-type c-decl-id-start face font-lock-type-face) 6 7 (fontified nil) 7 8 (fontified nil face font-lock-function-name-face) 8 9 (fontified nil face font-lock-function-name-face) 9 10 (fontified nil face font-lock-function-name-face) 10 11 (fontified nil face font-lock-function-name-face)) . 1198) (#(" float valy" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face) 3 5 (fontified nil face font-lock-type-face) 5 6 (fontified nil face font-lock-type-face) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 1210) (#("float pyaw " 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face) 2 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil face font-lock-type-face) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 1223) (undo-tree-id2377 . -11) (undo-tree-id2378 . -11) (undo-tree-id2379 . -11) (undo-tree-id2380 . -11) (undo-tree-id2381 . -11) (undo-tree-id2382 . -11) (undo-tree-id2383 . -11) (undo-tree-id2384 . -11) (undo-tree-id2385 . -11) (undo-tree-id2386 . -11) (undo-tree-id2387 . -11) (undo-tree-id2388 . -11) (undo-tree-id2389 . -11) (undo-tree-id2390 . -11) (undo-tree-id2391 . -11) (undo-tree-id2392 . -11) (undo-tree-id2393 . -11) (undo-tree-id2394 . -11) (#("float nyaw " 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 4 (fontified t face font-lock-type-face) 4 5 (fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (fontified t) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t)) . 1297) (undo-tree-id2395 . -10) (nil rear-nonsticky t 1198 . 1199)) (25987 63256 571616 25000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 1200 . 1201) (1238 . 1249) (1225 . 1236) (1212 . 1223) (1200 . 1211)) nil (25987 63270 753286 365000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 1233) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (1234 . 1235)) ((#("
" 0 1 (fontified nil)) . 1234) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (1233 . 1234)) (25987 63256 565287 964000) 0 nil])
([nil nil ((1200 . 1202) (#(" " 0 1 (fontified t rear-nonsticky t)) . -1200) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) 1201) nil (25987 63270 753279 154000) 0 nil])
nil
([nil nil ((1213 . 1215) (#(" " 0 1 (fontified t)) . 1213) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) 1215) nil (25987 63270 753234 389000) 0 nil])
([nil nil ((1226 . 1228) (#(" " 0 1 (fontified t)) . 1226) 1229) nil (25987 63270 753200 403000) 0 nil])
([nil nil ((1241 . 1243) (#(" " 0 1 (fontified t)) . 1241) 1245) nil (25987 63270 753196 872000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1255) (undo-tree-id2451 . -2) (undo-tree-id2452 . -2) (undo-tree-id2453 . -2) (undo-tree-id2454 . -2) (undo-tree-id2455 . -2) (undo-tree-id2456 . -2) (undo-tree-id2457 . -2) (undo-tree-id2458 . -2) (undo-tree-id2459 . -2) (undo-tree-id2460 . -2) 1257 (1255 . 1257) (#("  " 0 2 (fontified nil)) . 1254) (undo-tree-id2461 . -2) (undo-tree-id2462 . -2) (undo-tree-id2463 . -2) (undo-tree-id2464 . -2) (undo-tree-id2465 . -2) (undo-tree-id2466 . -2) (undo-tree-id2467 . -2) (undo-tree-id2468 . -2) (undo-tree-id2469 . -2) (undo-tree-id2470 . -2) (1253 . 1257)) nil (25987 63270 753190 291000) 0 nil])
([nil nil ((1212 . 1214) (#("'" 0 1 (fontified nil face font-lock-function-name-face)) . -1212) (1212 . 1213)) nil (25987 63270 753150 825000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t face font-lock-warning-face)) . -1212) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (#("'" 0 1 (fontified t face font-lock-warning-face)) . -1213) (undo-tree-id2439 . 1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) 1214) nil (25987 63270 757615 279000) 0 nil])
([nil nil ((1256 . 1257) (1240 . 1241) (1226 . 1227) (1212 . 1213)) nil (25987 63283 886251 65000) 0 nil] [nil nil ((1212 . 1213)) ((#("
" 0 1 (fontified t)) . 1212) (undo-tree-id2539 . -1)) (25987 63270 753022 963000) 0 nil])
([nil nil ((#("    float" 0 1 (fontified t) 1 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t face font-lock-type-face) 8 9 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 1724) (undo-tree-id2545 . -8) (undo-tree-id2546 . -8) (undo-tree-id2547 . -8) (undo-tree-id2548 . -8) (undo-tree-id2549 . -4) (undo-tree-id2550 . -4) (undo-tree-id2551 . -4) (undo-tree-id2552 . -4) (undo-tree-id2553 . -4) (undo-tree-id2554 . -4) (undo-tree-id2555 . -4) (undo-tree-id2556 . -4) (undo-tree-id2557 . -4) (undo-tree-id2558 . -4) (undo-tree-id2559 . -4) (undo-tree-id2560 . -4) (undo-tree-id2561 . -4) (undo-tree-id2562 . -4) (undo-tree-id2563 . -4) (undo-tree-id2564 . -4) (undo-tree-id2565 . -4) (undo-tree-id2566 . -9) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -2) (undo-tree-id2575 . -2) (undo-tree-id2576 . -2) (undo-tree-id2577 . -2) (undo-tree-id2578 . -2) (undo-tree-id2579 . -2) (undo-tree-id2580 . -2) (undo-tree-id2581 . -3) (undo-tree-id2582 . -3) (undo-tree-id2583 . -3) (undo-tree-id2584 . -3) (undo-tree-id2585 . -3) (undo-tree-id2586 . -3) (undo-tree-id2587 . -3) (undo-tree-id2588 . -4) (undo-tree-id2589 . -4) (undo-tree-id2590 . -4) (undo-tree-id2591 . -4) (undo-tree-id2592 . -4) (undo-tree-id2593 . -4) (undo-tree-id2594 . -4) (undo-tree-id2595 . -5) (undo-tree-id2596 . -5) (undo-tree-id2597 . -5) (undo-tree-id2598 . -5) (undo-tree-id2599 . -5) (undo-tree-id2600 . -5) (undo-tree-id2601 . -5) (undo-tree-id2602 . -6) (undo-tree-id2603 . -6) (undo-tree-id2604 . -6) (undo-tree-id2605 . -6) (undo-tree-id2606 . -6) (undo-tree-id2607 . -6) (undo-tree-id2608 . -6) (undo-tree-id2609 . -7) (undo-tree-id2610 . -7) (undo-tree-id2611 . -7) (undo-tree-id2612 . -7) (undo-tree-id2613 . -7) (undo-tree-id2614 . -7) (undo-tree-id2615 . -7) (undo-tree-id2616 . -8) (undo-tree-id2617 . -8) (undo-tree-id2618 . -8) (undo-tree-id2619 . -8) (undo-tree-id2620 . -8) (undo-tree-id2621 . -8) (undo-tree-id2622 . -8) (undo-tree-id2623 . -9) (undo-tree-id2624 . -9) (undo-tree-id2625 . -9) (undo-tree-id2626 . -9) (undo-tree-id2627 . -9) (undo-tree-id2628 . -9) (undo-tree-id2629 . -9) (undo-tree-id2630 . -8) (undo-tree-id2631 . -8) (undo-tree-id2632 . -8) (undo-tree-id2633 . -8) (undo-tree-id2634 . -8) (undo-tree-id2635 . -8) (undo-tree-id2636 . -8) (undo-tree-id2637 . -8) (undo-tree-id2638 . -9) (undo-tree-id2639 . -9) (#("    float" 0 1 (fontified t) 1 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 8 (fontified t face font-lock-type-face) 8 9 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 1703) (undo-tree-id2640 . -4) (undo-tree-id2641 . -4) (undo-tree-id2642 . -4) (undo-tree-id2643 . -4) (undo-tree-id2644 . -4) (undo-tree-id2645 . -4) (undo-tree-id2646 . -4) (undo-tree-id2647 . -4) (undo-tree-id2648 . -4) (undo-tree-id2649 . -4) (undo-tree-id2650 . -4) (undo-tree-id2651 . -4) (undo-tree-id2652 . -4) (undo-tree-id2653 . -4) (undo-tree-id2654 . -9) (#("    float" 0 1 (fontified t) 1 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 8 (fontified t face font-lock-type-face) 8 9 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 1682) (undo-tree-id2655 . -4) (undo-tree-id2656 . -4) (undo-tree-id2657 . -4) (undo-tree-id2658 . -4) (undo-tree-id2659 . -4) (undo-tree-id2660 . -4) (undo-tree-id2661 . -4) (undo-tree-id2662 . -4) (undo-tree-id2663 . -4) (undo-tree-id2664 . -4) (undo-tree-id2665 . -4) (undo-tree-id2666 . -4) (undo-tree-id2667 . -4) (undo-tree-id2668 . -4) (undo-tree-id2669 . -9) (#("    float" 0 1 (fontified t c-is-sws t c-in-sws t) 1 3 (c-in-sws t fontified t c-is-sws t) 3 4 (fontified t c-in-sws t c-is-sws t) 4 5 (c-is-sws t fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 8 (fontified t face font-lock-type-face) 8 9 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 1654) (undo-tree-id2670 . -4) (undo-tree-id2671 . -5) (undo-tree-id2672 . -5) (undo-tree-id2673 . -5) (undo-tree-id2674 . -5) (undo-tree-id2675 . -5) (undo-tree-id2676 . -5) (undo-tree-id2677 . -5) (undo-tree-id2678 . -5) (undo-tree-id2679 . -5) (undo-tree-id2680 . -5) (undo-tree-id2681 . -5) (undo-tree-id2682 . -5) (undo-tree-id2683 . -5) (undo-tree-id2684 . -5) (undo-tree-id2685 . -5) (undo-tree-id2686 . -4) (undo-tree-id2687 . -4) (undo-tree-id2688 . -4) (undo-tree-id2689 . -4) (undo-tree-id2690 . -4) (undo-tree-id2691 . -4) (undo-tree-id2692 . -4) (undo-tree-id2693 . -4) (undo-tree-id2694 . -4) (undo-tree-id2695 . -4) (undo-tree-id2696 . -4) (undo-tree-id2697 . -4) (undo-tree-id2698 . -4) (undo-tree-id2699 . -4) (undo-tree-id2700 . -4) (undo-tree-id2701 . -4) (undo-tree-id2702 . -9) 1759) nil (25987 63292 953958 772000) 0 nil] [nil nil ((1659 . 1660)) ((#("
" 0 1 (fontified t)) . 1659) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1)) (25987 63283 882157 687000) 0 nil])
nil
([nil nil ((1654 . 1658) (#(" " 0 1 (fontified t c-is-sws t c-in-sws t)) . 1654)) nil (25987 63292 953421 890000) 0 nil])
nil
([nil nil ((1685 . 1689) (#(" " 0 1 (fontified t)) . 1685) 1689) nil (25987 63292 953419 279000) 0 nil])
([nil nil ((1709 . 1713) (#(" " 0 1 (fontified t)) . 1709) 1716) nil (25987 63292 953414 788000) 0 nil])
([nil nil ((1733 . 1737) (#(" " 0 1 (fontified t)) . 1733) (undo-tree-id2544 . 1) 1743) nil (25987 63292 953404 771000) 0 nil])
([nil nil ((1274 . 1275) (1262 . 1274) (1260 . 1262) (1257 . 1260) (t 25987 63293 947 487000)) nil (25987 63581 186337 369000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -2018) (undo-tree-id2810 . -2) 2020 (2018 . 2020) (#("  " 0 2 (fontified nil)) . 2017) (undo-tree-id2811 . -2) (2017 . 2020) (#("  " 0 2 (fontified nil)) . 2016) (undo-tree-id2812 . -2) (2015 . 2019)) nil (25987 63581 186332 528000) 0 nil])
([nil nil ((2037 . 2039) (2019 . 2037) (2017 . 2019)) nil (25987 63581 186323 228000) 0 nil])
([nil nil ((2042 . 2046) (2041 . 2045) (2040 . 2042) (2039 . 2040)) nil (25987 63581 186320 32000) 0 nil])
([nil nil ((2042 . 2046) (#("   " 0 3 (fontified nil)) . -2042) (undo-tree-id2809 . -3) (#(" " 0 1 (fontified t)) . 2045)) nil (25987 63581 186315 843000) 0 nil])
([nil nil ((2026 . 2027) (2024 . 2026)) nil (25987 63581 186311 321000) 0 nil])
([nil nil ((2069 . 2070) (#(")" 0 1 (fontified nil)) . -2069) (2069 . 2070) (2066 . 2069) (2065 . 2066) (2060 . 2065) (2050 . 2060) (#("l" 0 1 (fontified t)) . -2050) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (#("a" 0 1 (fontified t)) . -2051) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (#("o" 0 1 (fontified t)) . -2052) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (#("t" 0 1 (fontified t)) . -2053) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (#(" " 0 1 (fontified t)) . -2054) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) 2055 (2049 . 2055) (#("l" 0 1 (fontified t)) . -2049) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (#("e" 0 1 (fontified t)) . -2050) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (#("t" 0 1 (fontified t)) . -2051) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (#(" " 0 1 (fontified t)) . -2052) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) 2053 (2049 . 2053) (#("i" 0 1 (fontified t)) . -2049) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) 2050 (2049 . 2050) (#("v" 0 1 (fontified t)) . -2049) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (#("o" 0 1 (fontified t)) . -2050) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (#("i" 0 1 (fontified t)) . -2051) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (#("d" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2052) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (#(" " 0 1 (fontified t)) . -2053) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) 2054 (2049 . 2054) (#("v" 0 1 (fontified t)) . -2049) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (#("o" 0 1 (fontified t)) . -2050) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (#("i" 0 1 (fontified t)) . -2051) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (#("d" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2052) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (#(" " 0 1 (fontified t)) . -2053) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) 2054 (2049 . 2054) (#("v" 0 1 (fontified t)) . -2049) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (#("o" 0 1 (fontified t)) . -2050) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (#("i" 0 1 (fontified t)) . -2051) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (#("d" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2052) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (#(" " 0 1 (fontified t)) . -2053) (undo-tree-id2788 . -1) 2054 (2049 . 2054) (#("l" 0 1 (fontified t)) . -2049) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) 2050 (2049 . 2050) (2048 . 2049) (#(" " 0 1 (fontified t)) . -2048) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (#("g" 0 1 (fontified t)) . -2049) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (#("e" 0 1 (fontified t)) . -2050) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (#("t" 0 1 (fontified t)) . -2051) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (#("o" 0 1 (fontified t)) . -2052) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (#("t" 0 1 (fontified t)) . -2053) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) 2054 (2049 . 2054) (2045 . 2049) (#("   " 0 3 (fontified nil)) . -2045) (undo-tree-id2808 . -3) (#(" " 0 1 (fontified t)) . 2048)) nil (25987 63581 186289 328000) 0 nil])
([nil nil ((2060 . 2061)) nil (25987 63581 186154 155000) 0 nil])
([nil nil ((2075 . 2076) (#(")" 0 1 (fontified nil)) . -2075) (2075 . 2076) (2071 . 2075)) nil (25987 63581 186151 58000) 0 nil])
([nil nil ((2060 . 2061)) nil (25987 63581 186147 905000) 0 nil])
([nil nil ((2077 . 2078)) nil (25987 63581 186146 83000) 0 nil])
([nil nil ((2071 . 2074)) nil (25987 63581 186144 372000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -2073) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) 2074) nil (25987 63581 186140 760000) 0 nil])
([nil nil ((2078 . 2080)) nil (25987 63581 186049 966000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2081) (undo-tree-id2730 . -1) 2082 (2081 . 2082) (#(" " 0 1 (fontified t)) . -2081) (undo-tree-id2731 . -1) 2082 (2081 . 2082) (#(" " 0 1 (fontified t)) . -2081) (undo-tree-id2732 . -1) 2082 (2081 . 2082) (#(" " 0 1 (fontified t)) . -2081) (undo-tree-id2733 . -1) 2082 (2081 . 2082) (#(" " 0 1 (fontified t)) . -2081) (undo-tree-id2734 . -1) 2082 (2081 . 2082) (#(" " 0 1 (fontified t)) . -2081) (undo-tree-id2735 . -1) 2082 (2081 . 2082) (#(" " 0 1 (fontified t)) . -2081) (undo-tree-id2736 . -1) 2082 (2081 . 2082) (#(" " 0 1 (fontified t)) . -2081) (undo-tree-id2737 . -1) 2082) nil (25987 63581 186043 647000) 0 nil])
([nil nil ((#(" + 1.0)" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-3-face))) . 2074) (undo-tree-id2729 . -7)) nil (25987 63581 186010 556000) 0 nil])
([nil nil ((2072 . 2073) (#("0" 0 1 (fontified t)) . -2072) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (#("." 0 1 (fontified t)) . -2073) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) 2074 (2073 . 2074)) nil (25987 63581 186002 630000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 2060)) nil (25987 63581 185986 653000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t)) . -2075) (undo-tree-id2723 . -6) 2081 (2075 . 2081) (#("      " 0 6 (fontified nil)) . 2074) (undo-tree-id2724 . -6) (2073 . 2081)) nil (25987 63581 185982 157000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2077 . 2078) (#("
" 0 1 (fontified nil)) . -2102) (2073 . 2103) 2045) nil (25987 63581 185968 718000) 0 nil])
([nil nil ((2085 . 2086) (#("1" 0 1 (fontified t face font-lock-variable-name-face)) . -2085) (undo-tree-id2722 . -1) 2086) nil (25987 63581 185961 962000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 2097)) nil (25987 63581 185948 829000) 0 nil])
([nil nil ((2074 . 2080) (#("    " 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t)) . 2074) 2096) nil (25987 63581 185945 206000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2098) (undo-tree-id2721 . 1)) nil (25987 63581 185940 13000) 0 nil])
([nil nil ((2098 . 2099)) nil (25987 63581 185933 838000) 0 nil])
([nil nil ((2073 . 2074)) nil (25987 63581 185930 897000) 0 nil])
([nil nil ((2075 . 2079) (#("      " 0 6 (fontified t)) . 2075) 2103) nil (25987 63581 185927 359000) 0 nil])
([nil nil ((2102 . 2103)) nil (25987 63581 185924 73000) 0 nil])
([nil nil ((2110 . 2111) (2106 . 2110) (#("    " 0 4 (fontified nil)) . 2105) (undo-tree-id2719 . -4) (2105 . 2110) (#("    " 0 4 (fontified nil)) . 2104) (undo-tree-id2720 . -4) (2108 . 2109) (2104 . 2108)) nil (25987 63581 185919 898000) 0 nil])
([nil nil ((2110 . 2128) (#("y" 0 1 (fontified t)) . -2110) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) 2111) nil (25987 63581 185907 67000) 0 nil])
([nil nil ((2128 . 2129)) nil (25987 63581 185897 172000) 0 nil])
([nil nil ((1803 . 1805) (1787 . 1803) (#("g" 0 1 (fontified t)) . -1787) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (#("e" 0 1 (fontified t)) . -1788) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (#("t" 0 1 (fontified t)) . -1789) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) 1790 (1787 . 1790) (1786 . 1787) (1781 . 1786) (1777 . 1781) (#("    " 0 4 (fontified nil)) . 1776) (undo-tree-id2715 . -4) (1776 . 1781) (#("    " 0 4 (fontified nil)) . 1775) (undo-tree-id2716 . -4) (1779 . 1780) (1775 . 1779)) nil (25987 63581 185889 724000) 0 nil])
([nil nil ((#("get" 0 1 (fontified t face font-lock-function-name-face) 1 2 (fontified t face font-lock-function-name-face) 2 3 (fontified t face font-lock-function-name-face)) . 2057) (undo-tree-id2708 . -2)) nil (25987 63581 185857 769000) 0 nil])
([nil nil ((2057 . 2060)) nil (25987 63581 185851 729000) 0 nil])
([nil nil ((#("get" 0 1 (fontified t) 1 3 (fontified t)) . 1790) (undo-tree-id2706 . -2) (undo-tree-id2707 . -3)) nil (25987 63581 189768 711000) 0 nil])
([nil nil ((1790 . 1793)) nil (25987 63601 597737 651000) 0 nil] [nil nil ((#("_" 0 1 (fontified t)) . 1790) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1)) ((1790 . 1791)) (25987 63581 185828 589000) 0 nil])
([nil nil ((1805 . 1806)) nil (25987 63601 597735 786000) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified t)) . -1808) (undo-tree-id2827 . -4) (undo-tree-id2828 . -4) (undo-tree-id2829 . -4) (undo-tree-id2830 . -4) (undo-tree-id2831 . -4) (undo-tree-id2832 . -4) (undo-tree-id2833 . -4) (undo-tree-id2834 . -4) (undo-tree-id2835 . -4) (undo-tree-id2836 . -4) 1812 (1808 . 1812) (#("    " 0 4 (fontified nil)) . 1807) (undo-tree-id2837 . -4) (undo-tree-id2838 . -4) (undo-tree-id2839 . -4) (undo-tree-id2840 . -4) (undo-tree-id2841 . -4) (undo-tree-id2842 . -4) (undo-tree-id2843 . -4) (undo-tree-id2844 . -4) (undo-tree-id2845 . -4) (undo-tree-id2846 . -4) (1806 . 1812)) nil (25987 63601 597731 399000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2038 . 2039) (#("
" 0 1 (fontified nil)) . -2089) (2034 . 2090) 1980) nil (25987 63601 597690 71000) 0 nil])
([nil nil ((#("nyaw" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face)) . 2072) (undo-tree-id2825 . -3) (undo-tree-id2826 . -4)) nil (25987 63601 597686 10000) 0 nil])
([nil nil ((2072 . 2081)) nil (25987 63601 597681 174000) 0 nil])
([nil nil ((#("otalyaw " 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 8 (fontified t face font-lock-string-face)) . 2073) (undo-tree-id2815 . -7) (undo-tree-id2816 . -7) (undo-tree-id2817 . -7) (undo-tree-id2818 . -7) (undo-tree-id2819 . -7) (undo-tree-id2820 . -7) (undo-tree-id2821 . -7) (undo-tree-id2822 . -7) (undo-tree-id2823 . -7) (undo-tree-id2824 . -8)) nil (25987 63601 597677 522000) 0 nil])
([nil nil ((2075 . 2076) (2073 . 2075)) nil (25987 63601 597658 11000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 2083) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1)) nil (25987 63601 597652 604000) 0 nil])
([nil nil ((2083 . 2088)) nil (25987 63601 597627 616000) 0 nil])
([nil nil ((#("this" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face)) . 1781) (undo-tree-id2849 . -3) (t 25987 63601 614534 891000)) nil (25987 63660 478818 926000) 0 nil])
([nil nil ((#("->" 0 1 (fontified t) 1 2 (fontified t)) . 1781) (undo-tree-id2847 . -1) (undo-tree-id2848 . -2)) nil (25987 63660 478805 544000) 0 nil])
([nil nil ((1785 . 1786) (#(";" 0 1 (fontified t)) . -1785) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) 1786 (1785 . 1786) (1781 . 1785) (t 25987 63660 523245 78000)) nil (25987 63725 794137 459000) 0 nil])
([nil nil ((1786 . 1787) (1785 . 1786) (#("." 0 1 (fontified t)) . -1785) (undo-tree-id2860 . -1) 1786 (t 25987 63725 840070 927000)) nil (25987 63917 609562 13000) 0 nil])
([nil nil ((#("{" 0 1 (c-in-sws t fontified t face font-lock-comment-face)) . -2329) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (#("S" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -2330) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) 2331 (2330 . 2331) (2159 . 2160) (#(")" 0 1 (fontified nil)) . -2159) (2159 . 2160) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 2155) (2154 . 2156) (#("t" 0 1 (fontified t)) . -1781) (undo-tree-id3028 . -1) (#("h" 0 1 (fontified t)) . -1782) (undo-tree-id3029 . -1) (#("i" 0 1 (fontified t)) . -1783) (undo-tree-id3030 . -1) (#("s" 0 1 (fontified t)) . -1784) (undo-tree-id3031 . -1) (#("-" 0 1 (fontified t)) . -1785) (undo-tree-id3032 . -1) (#(">" 0 1 (fontified t)) . -1786) (undo-tree-id3033 . -1) 1787 (t 25987 63917 627133 307000)) nil (25987 64118 522955 18000) 0 nil])
([nil nil ((#("
  void my_set_total_yaw() {
    float t1 = (pyaw * (-1.5));
    float t2 = (pyaw * 1.5);


    totalyaw = t1 + t2;

  }" 0 1 (fontified t) 1 3 (fontified t) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (fontified t) 8 9 (fontified t face font-lock-function-name-face) 9 10 (fontified t face font-lock-function-name-face) 10 11 (fontified t face font-lock-function-name-face) 11 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t face font-lock-function-name-face) 13 14 (fontified t face font-lock-function-name-face) 14 15 (fontified t face font-lock-function-name-face) 15 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t face font-lock-function-name-face) 17 18 (fontified t face font-lock-function-name-face) 18 19 (fontified t face font-lock-function-name-face) 19 20 (fontified t face font-lock-function-name-face) 20 21 (fontified t face font-lock-function-name-face) 21 22 (fontified t face font-lock-function-name-face) 22 23 (fontified t face font-lock-function-name-face) 23 24 (fontified t face font-lock-function-name-face) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t face (rainbow-delimiters-depth-2-face)) 26 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 29 (fontified t) 29 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t face font-lock-type-face) 34 35 (fontified t face font-lock-type-face) 35 36 (fontified t face font-lock-type-face) 36 37 (fontified t face font-lock-type-face) 37 38 (fontified t c-type c-decl-id-start face font-lock-type-face) 38 39 (fontified t) 39 40 (fontified t face font-lock-variable-name-face) 40 41 (fontified t face font-lock-variable-name-face) 41 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-3-face)) 45 46 (fontified t) 46 47 (fontified t) 47 48 (fontified t) 48 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t face (rainbow-delimiters-depth-4-face)) 53 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t face (rainbow-delimiters-depth-4-face)) 58 59 (fontified t face (rainbow-delimiters-depth-3-face)) 59 60 (fontified t) 60 61 (fontified t) 61 65 (fontified t) 65 66 (fontified t face font-lock-type-face) 66 67 (fontified t face font-lock-type-face) 67 68 (fontified t face font-lock-type-face) 68 69 (fontified t face font-lock-type-face) 69 70 (fontified t c-type c-decl-id-start face font-lock-type-face) 70 71 (fontified t) 71 72 (fontified t face font-lock-variable-name-face) 72 73 (fontified t face font-lock-variable-name-face) 73 74 (fontified t) 74 75 (fontified t) 75 76 (fontified t) 76 77 (fontified t face (rainbow-delimiters-depth-3-face)) 77 78 (fontified t) 78 79 (fontified t) 79 80 (fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 83 (fontified t) 83 84 (fontified t) 84 85 (fontified t) 85 86 (fontified t) 86 87 (fontified t) 87 88 (fontified t face (rainbow-delimiters-depth-3-face)) 88 89 (fontified t) 89 90 (fontified t) 90 91 (fontified t) 91 92 (fontified t) 92 96 (fontified t) 96 97 (fontified t) 97 98 (fontified t) 98 99 (fontified t) 99 100 (fontified t) 100 101 (fontified t) 101 102 (fontified t) 102 103 (fontified t) 103 104 (fontified t) 104 105 (fontified t) 105 106 (fontified t) 106 107 (fontified t) 107 108 (fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 111 (fontified t) 111 112 (fontified t) 112 113 (fontified t) 113 114 (fontified t) 114 115 (fontified t) 115 116 (fontified t) 116 117 (fontified t) 117 119 (fontified t) 119 120 (fontified t face (rainbow-delimiters-depth-2-face))) . 2102) (undo-tree-id3034 . -119) (undo-tree-id3035 . -119) (undo-tree-id3036 . -119) (undo-tree-id3037 . -52) (undo-tree-id3038 . -119) (t 25987 64118 532823 723000)) nil (25987 64266 692520 944000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1395 . 1396) (nil fontified nil 1276 . 1396) (1276 . 1396)) nil (25987 64266 692485 513000) 0 nil])
([nil nil ((#("  void my_set_total_yaw() {
" 0 2 (fontified t) 2 5 (fontified t face font-lock-type-face) 5 6 (fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (fontified t) 7 23 (fontified t face font-lock-function-name-face) 23 24 (fontified t face (rainbow-delimiters-depth-2-face)) 24 25 (fontified t face (rainbow-delimiters-depth-2-face)) 25 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 28 (fontified t)) . 1277) (undo-tree-id3148 . -27) (undo-tree-id3149 . -2) 1279 (t 25987 64266 739116 619000)) nil (25987 64299 47150 831000) 0 nil])
([nil nil ((#("  }
" 0 2 (fontified t) 2 3 (fontified t rear-nonsticky t face (rainbow-delimiters-depth-2-face)) 3 4 (fontified t)) . 1365) (undo-tree-id3146 . -3) (undo-tree-id3147 . -2) 1367) nil (25987 64299 47144 37000) 0 nil])
([nil nil ((#("    float t1 = (pyaw * (-1.5));
    float t2 = (pyaw * 1.5);


    totalyaw = t1 + t2;

" 0 4 (fontified t) 4 8 (fontified t face font-lock-type-face) 8 9 (fontified t c-type c-decl-id-start face font-lock-type-face) 9 10 (fontified t) 10 12 (fontified t face font-lock-variable-name-face) 12 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-3-face)) 24 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-3-face)) 29 30 (fontified t face (rainbow-delimiters-depth-2-face)) 30 31 (fontified t) 31 32 (fontified t) 32 36 (fontified t) 36 40 (fontified t face font-lock-type-face) 40 41 (fontified t c-type c-decl-id-start face font-lock-type-face) 41 42 (fontified t) 42 44 (fontified t face font-lock-variable-name-face) 44 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-3-face)) 48 58 (fontified t) 58 59 (fontified t face (rainbow-delimiters-depth-3-face)) 59 88 (fontified t)) . 1277) (undo-tree-id3111 . -87) (undo-tree-id3112 . -87) (undo-tree-id3113 . -87) (undo-tree-id3114 . -2) (undo-tree-id3115 . -88) (undo-tree-id3116 . -87) (undo-tree-id3117 . -63) (undo-tree-id3118 . -63) (undo-tree-id3119 . -63) (undo-tree-id3120 . -63) (undo-tree-id3121 . -63) (undo-tree-id3122 . -63) (undo-tree-id3123 . -63) (undo-tree-id3124 . -62) (undo-tree-id3125 . -62) (undo-tree-id3126 . -62) (undo-tree-id3127 . -62) (undo-tree-id3128 . -62) (undo-tree-id3129 . -62) (undo-tree-id3130 . -62) (undo-tree-id3131 . -61) (undo-tree-id3132 . -61) (undo-tree-id3133 . -61) (undo-tree-id3134 . -61) (undo-tree-id3135 . -61) (undo-tree-id3136 . -61) (undo-tree-id3137 . -61) (undo-tree-id3138 . -32) (undo-tree-id3139 . -32) (undo-tree-id3140 . -32) (undo-tree-id3141 . -32) (undo-tree-id3142 . -32) (undo-tree-id3143 . -32) (undo-tree-id3144 . -32) (undo-tree-id3145 . -88)) nil (25987 64299 47134 696000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1889 . 1890) (nil fontified nil 1802 . 1890) (1802 . 1890)) nil (25987 64299 47075 807000) 0 nil])
([nil nil ((#("    my_set_total_yaw();
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-3-face)) 21 22 (fontified t face (rainbow-delimiters-depth-3-face)) 22 23 (fontified t) 23 24 (fontified t)) . 1777) (undo-tree-id3080 . -23) (undo-tree-id3081 . -4) (undo-tree-id3082 . -24) (undo-tree-id3083 . -24) (undo-tree-id3084 . -24) (undo-tree-id3085 . -24) (undo-tree-id3086 . -24) (undo-tree-id3087 . -24) (undo-tree-id3088 . -24) (undo-tree-id3089 . -24) (undo-tree-id3090 . -24) (undo-tree-id3091 . -24) (undo-tree-id3092 . -24) (undo-tree-id3093 . -24) (undo-tree-id3094 . -24) (undo-tree-id3095 . -24) (undo-tree-id3096 . -24) (undo-tree-id3097 . -24) (undo-tree-id3098 . -24) (undo-tree-id3099 . -24) (undo-tree-id3100 . -24) (undo-tree-id3101 . -24) (undo-tree-id3102 . -24) (undo-tree-id3103 . -24) (undo-tree-id3104 . -24) (undo-tree-id3105 . -24) (undo-tree-id3106 . -24) (undo-tree-id3107 . -24) (undo-tree-id3108 . -24) (undo-tree-id3109 . -24) (undo-tree-id3110 . -24)) nil (25987 64299 47070 178000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1776) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1)) nil (25987 64299 47016 661000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1776) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1)) nil (25987 64299 46885 103000) 0 nil])
([nil nil ((apply -9 1777 1874 undo--wrap-and-run-primitive-undo 1777 1874 ((" " . 1777) (1850 . 1853) (1816 . 1819) (1781 . 1784) (1777 . 1778))) (t 25987 64299 90493 453000)) nil (25987 64351 252164 445000) 0 nil])
([nil nil ((2100 . 2104) (#(" " 0 1 (fontified nil)) . 2100) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (2101 . 2103)) nil (25987 64351 252152 997000) 0 nil])
([nil nil ((#("  float valx;
  float valy;
  float pyaw;  
  float nyaw;
  float totalyaw;

" 0 2 (fontified t) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 6 (fontified t face font-lock-type-face) 6 7 (fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (fontified t) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t face font-lock-variable-name-face) 12 13 (fontified t) 13 14 (fontified t) 14 16 (fontified t) 16 17 (fontified t face font-lock-type-face) 17 18 (fontified t face font-lock-type-face) 18 20 (fontified t face font-lock-type-face) 20 21 (fontified t c-type c-decl-id-start face font-lock-type-face) 21 22 (fontified t) 22 23 (fontified t face font-lock-variable-name-face) 23 24 (fontified t face font-lock-variable-name-face) 24 25 (fontified t face font-lock-variable-name-face) 25 26 (fontified t face font-lock-variable-name-face) 26 27 (fontified t) 27 28 (fontified t) 28 30 (fontified t) 30 31 (fontified t face font-lock-type-face) 31 32 (fontified t face font-lock-type-face) 32 34 (fontified t face font-lock-type-face) 34 35 (fontified t c-type c-decl-id-start face font-lock-type-face) 35 36 (fontified t) 36 37 (fontified t face font-lock-variable-name-face) 37 38 (fontified t face font-lock-variable-name-face) 38 39 (fontified t face font-lock-variable-name-face) 39 40 (fontified t face font-lock-variable-name-face) 40 41 (fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 46 (fontified t) 46 47 (fontified t face font-lock-type-face) 47 48 (fontified t face font-lock-type-face) 48 50 (fontified t face font-lock-type-face) 50 51 (fontified t c-type c-decl-id-start face font-lock-type-face) 51 52 (fontified t) 52 53 (fontified t face font-lock-variable-name-face) 53 54 (fontified t face font-lock-variable-name-face) 54 55 (fontified t face font-lock-variable-name-face) 55 56 (fontified t face font-lock-variable-name-face) 56 57 (fontified t) 57 58 (fontified t) 58 60 (fontified t) 60 61 (fontified t face font-lock-type-face) 61 62 (fontified t face font-lock-type-face) 62 63 (fontified t face font-lock-type-face) 63 64 (fontified t face font-lock-type-face) 64 65 (fontified t c-type c-decl-id-start face font-lock-type-face) 65 66 (fontified t) 66 67 (fontified t face font-lock-variable-name-face) 67 68 (fontified t face font-lock-variable-name-face) 68 69 (fontified t face font-lock-variable-name-face) 69 70 (fontified t face font-lock-variable-name-face) 70 71 (fontified t face font-lock-variable-name-face) 71 72 (fontified t face font-lock-variable-name-face) 72 73 (fontified t face font-lock-variable-name-face) 73 74 (fontified t face font-lock-variable-name-face) 74 75 (fontified t) 75 76 (fontified t) 76 77 (fontified t)) . 1200) (undo-tree-id3224 . -76) (undo-tree-id3225 . -76) (undo-tree-id3226 . -76) (undo-tree-id3227 . -77) (undo-tree-id3228 . -26) (undo-tree-id3229 . -77) (undo-tree-id3230 . -77) (undo-tree-id3231 . -77) (undo-tree-id3232 . -77) (undo-tree-id3233 . -77) (undo-tree-id3234 . -77) (undo-tree-id3235 . -77) (undo-tree-id3236 . -76) (undo-tree-id3237 . -76) (undo-tree-id3238 . -76) (undo-tree-id3239 . -76) (undo-tree-id3240 . -76) (undo-tree-id3241 . -76) (undo-tree-id3242 . -76) (undo-tree-id3243 . -74) (undo-tree-id3244 . -74) (undo-tree-id3245 . -74) (undo-tree-id3246 . -74) (undo-tree-id3247 . -74) (undo-tree-id3248 . -74) (undo-tree-id3249 . -74) (undo-tree-id3250 . -56) (undo-tree-id3251 . -56) (undo-tree-id3252 . -56) (undo-tree-id3253 . -56) (undo-tree-id3254 . -56) (undo-tree-id3255 . -56) (undo-tree-id3256 . -56) (undo-tree-id3257 . -42) (undo-tree-id3258 . -42) (undo-tree-id3259 . -42) (undo-tree-id3260 . -42) (undo-tree-id3261 . -42) (undo-tree-id3262 . -42) (undo-tree-id3263 . -42) (undo-tree-id3264 . -26) (undo-tree-id3265 . -26) (undo-tree-id3266 . -26) (undo-tree-id3267 . -26) (undo-tree-id3268 . -26) (undo-tree-id3269 . -26) (undo-tree-id3270 . -26) (undo-tree-id3271 . -12) (undo-tree-id3272 . -12) (undo-tree-id3273 . -12) (undo-tree-id3274 . -12) (undo-tree-id3275 . -12) (undo-tree-id3276 . -12) (undo-tree-id3277 . -12) (undo-tree-id3278 . -12) (undo-tree-id3279 . -12) (undo-tree-id3280 . -12) (undo-tree-id3281 . -12) (undo-tree-id3282 . -12) (undo-tree-id3283 . -12) (undo-tree-id3284 . -12) (undo-tree-id3285 . -26) (undo-tree-id3286 . -26) (undo-tree-id3287 . -26) (undo-tree-id3288 . -26) (undo-tree-id3289 . -26) (undo-tree-id3290 . -26) (undo-tree-id3291 . -26) (undo-tree-id3292 . -42) (undo-tree-id3293 . -42) (undo-tree-id3294 . -42) (undo-tree-id3295 . -42) (undo-tree-id3296 . -42) (undo-tree-id3297 . -42) (undo-tree-id3298 . -42) (undo-tree-id3299 . -56) (undo-tree-id3300 . -56) (undo-tree-id3301 . -56) (undo-tree-id3302 . -56) (undo-tree-id3303 . -56) (undo-tree-id3304 . -56) (undo-tree-id3305 . -56) (undo-tree-id3306 . -74) (undo-tree-id3307 . -74) (undo-tree-id3308 . -74) (undo-tree-id3309 . -74) (undo-tree-id3310 . -74) (undo-tree-id3311 . -74) (undo-tree-id3312 . -74) (undo-tree-id3313 . -76) (undo-tree-id3314 . -76) (undo-tree-id3315 . -76) (undo-tree-id3316 . -76) (undo-tree-id3317 . -76) (undo-tree-id3318 . -76) (undo-tree-id3319 . -76) (undo-tree-id3320 . -77) (undo-tree-id3321 . -76) (undo-tree-id3322 . -76) (undo-tree-id3323 . -76) (undo-tree-id3324 . -76) (undo-tree-id3325 . -76) (undo-tree-id3326 . -76) (undo-tree-id3327 . -76) (undo-tree-id3328 . -76) (undo-tree-id3329 . -76) (undo-tree-id3330 . -76) (undo-tree-id3331 . -58) (undo-tree-id3332 . -58) (undo-tree-id3333 . -58) (undo-tree-id3334 . -58) (undo-tree-id3335 . -58) (undo-tree-id3336 . -58) (undo-tree-id3337 . -58) (undo-tree-id3338 . -44) (undo-tree-id3339 . -44) (undo-tree-id3340 . -44) (undo-tree-id3341 . -44) (undo-tree-id3342 . -44) (undo-tree-id3343 . -44) (undo-tree-id3344 . -44) (undo-tree-id3345 . -28) (undo-tree-id3346 . -28) (undo-tree-id3347 . -28) (undo-tree-id3348 . -28) (undo-tree-id3349 . -28) (undo-tree-id3350 . -28) (undo-tree-id3351 . -28) (undo-tree-id3352 . -14) (undo-tree-id3353 . -14) (undo-tree-id3354 . -14) (undo-tree-id3355 . -14) (undo-tree-id3356 . -14) (undo-tree-id3357 . -14) (undo-tree-id3358 . -14) (undo-tree-id3359 . -77) (t 25987 64351 307871 636000)) nil (25987 64447 759174 908000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1191) (undo-tree-id3194 . -2) (undo-tree-id3195 . -2) (undo-tree-id3196 . -2) (undo-tree-id3197 . -2) (undo-tree-id3198 . -2) (undo-tree-id3199 . -2) (undo-tree-id3200 . -2) (undo-tree-id3201 . -2) (undo-tree-id3202 . -2) (undo-tree-id3203 . -2) 1193 (1191 . 1193) (#("  " 0 2 (fontified nil)) . 1190) (undo-tree-id3204 . -2) (undo-tree-id3205 . -2) (undo-tree-id3206 . -2) (undo-tree-id3207 . -2) (undo-tree-id3208 . -2) (undo-tree-id3209 . -2) (undo-tree-id3210 . -2) (undo-tree-id3211 . -2) (undo-tree-id3212 . -2) (undo-tree-id3213 . -2) (1190 . 1193) (#("  " 0 2 (fontified nil)) . 1189) (undo-tree-id3214 . -2) (undo-tree-id3215 . -2) (undo-tree-id3216 . -2) (undo-tree-id3217 . -2) (undo-tree-id3218 . -2) (undo-tree-id3219 . -2) (undo-tree-id3220 . -2) (undo-tree-id3221 . -2) (undo-tree-id3222 . -2) (undo-tree-id3223 . -2) (1188 . 1192)) nil (25987 64447 758779 732000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -984) (undo-tree-id3173 . -2) (undo-tree-id3174 . -2) (undo-tree-id3175 . -2) (undo-tree-id3176 . -2) (undo-tree-id3177 . -2) (undo-tree-id3178 . -2) (undo-tree-id3179 . -2) (undo-tree-id3180 . -2) (undo-tree-id3181 . -2) (undo-tree-id3182 . -2) 986 (984 . 986) (#("  " 0 2 (fontified nil)) . 983) (undo-tree-id3183 . -2) (undo-tree-id3184 . -2) (undo-tree-id3185 . -2) (undo-tree-id3186 . -2) (undo-tree-id3187 . -2) (undo-tree-id3188 . -2) (undo-tree-id3189 . -2) (undo-tree-id3190 . -2) (undo-tree-id3191 . -2) (undo-tree-id3192 . -2) (983 . 986) (#("  " 0 2 (fontified nil)) . 982) (undo-tree-id3193 . -2) (981 . 985)) nil (25987 64447 758571 375000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1059 . 1060) (nil fontified nil 983 . 1060) (983 . 1060)) nil (25987 64447 758424 347000) 0 nil])
([nil nil ((1697 . 1702) (1696 . 1698) (t 25987 64447 810471 994000)) nil (25987 64546 127298 32000) 0 nil])
([nil nil ((1703 . 1704)) nil (25987 64546 127295 30000) 0 nil])
([nil nil ((1729 . 1735) (1728 . 1730)) nil (25987 64546 127292 569000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1734)) nil (25987 64546 127289 408000) 0 nil])
([nil nil ((1764 . 1765) (#("e" 0 1 (fontified t)) . -1764) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) 1765 (1760 . 1765) (1759 . 1761)) nil (25987 64546 127282 793000) 0 nil])
([nil nil ((1791 . 1796) (1790 . 1792)) nil (25987 64546 127223 989000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1284) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (#("v" 0 1 (fontified t)) . -1285) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (#("o" 0 1 (fontified t)) . -1286) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (#("i" 0 1 (fontified t)) . -1287) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (#("d" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1288) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (#(" " 0 1 (fontified t)) . -1289) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -1290) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -1291) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (#("s" 0 1 (fontified t face font-lock-function-name-face)) . -1292) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) 1293 (1285 . 1293) (1283 . 1285) (#("  " 0 2 (fontified nil)) . 1282) (undo-tree-id3411 . -2) (1282 . 1285) (#("  " 0 2 (fontified nil)) . 1281) (undo-tree-id3412 . -2) (1283 . 1284) (1281 . 1283) (t 25987 64546 171650 687000)) nil (25987 64915 338313 355000) 0 nil])
([nil nil ((1296 . 1298) (1288 . 1296) (1284 . 1288) (#("p" 0 1 (fontified t)) . -1284) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (#("o" 0 1 (fontified t)) . -1285) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (#("i" 0 1 (fontified t)) . -1286) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (#("d" 0 1 (fontified t)) . -1287) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (#(" " 0 1 (fontified t)) . -1288) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) 1289 (1283 . 1289) (1281 . 1283)) nil (25987 64915 338266 385000) 0 nil])
([nil nil ((1298 . 1299)) nil (25987 64915 338246 82000) 0 nil])
([nil nil ((1316 . 1318) (1309 . 1316) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -1309) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) 1310 (1303 . 1310) (1301 . 1303) (#(" " 0 1 (fontified t)) . 1301)) nil (25987 64915 338242 544000) 0 nil])
([nil nil ((1322 . 1326) (#("    " 0 4 (fontified nil)) . 1321) (undo-tree-id3380 . -4) (1321 . 1326) (1320 . 1324) (1319 . 1321) (1318 . 1319)) nil (25987 64915 338230 535000) 0 nil])
([nil nil ((1940 . 1942) (1932 . 1940) (1928 . 1932)) nil (25987 64915 338204 903000) 0 nil])
([nil nil ((1943 . 1944) (1942 . 1944) (#("'" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1942) (1942 . 1943) (t 25987 64915 382691 174000)) nil (25987 64968 648457 523000) 0 nil])
([nil nil ((1942 . 1943) (#("'" 0 1 (fontified nil face font-lock-warning-face)) . -1942) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (#("'" 0 1 (fontified t face font-lock-warning-face)) . 1943) (undo-tree-id3457 . 1) (#(";" 0 1 (fontified t face font-lock-string-face)) . -1943) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) 1944) nil (25987 64968 648440 645000) 0 nil])
([nil nil ((#("const" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face c-type c-decl-id-start)) . 1390) (undo-tree-id3477 . -4) (undo-tree-id3478 . -5) (t 25987 64968 661655 927000)) nil (25987 65133 794715 228000) 0 nil])
([nil nil ((#("  void testthis() {

    
  }

" 0 2 (fontified t) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (fontified t) 7 8 (fontified t face font-lock-function-name-face) 8 9 (fontified t face font-lock-function-name-face) 9 10 (fontified t face font-lock-function-name-face) 10 11 (fontified t face font-lock-function-name-face) 11 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t face font-lock-function-name-face) 13 15 (fontified t face font-lock-function-name-face) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-2-face)) 19 20 (fontified t) 20 25 (fontified t) 25 26 (fontified t) 26 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 30 (fontified t) 30 31 (fontified t)) . 1301) (undo-tree-id3500 . -30) (undo-tree-id3501 . -30) (undo-tree-id3502 . -30) (undo-tree-id3503 . -31) (undo-tree-id3504 . -31) (undo-tree-id3505 . -20) (undo-tree-id3506 . -20) (undo-tree-id3507 . -20) (undo-tree-id3508 . -20) (undo-tree-id3509 . -20) (undo-tree-id3510 . -20) (undo-tree-id3511 . -20) (undo-tree-id3512 . -21) (undo-tree-id3513 . -21) (undo-tree-id3514 . -21) (undo-tree-id3515 . -21) (undo-tree-id3516 . -21) (undo-tree-id3517 . -21) (undo-tree-id3518 . -21) (undo-tree-id3519 . -26) (undo-tree-id3520 . -26) (undo-tree-id3521 . -26) (undo-tree-id3522 . -26) (undo-tree-id3523 . -26) (undo-tree-id3524 . -26) (undo-tree-id3525 . -26) (undo-tree-id3526 . -30) (undo-tree-id3527 . -30) (undo-tree-id3528 . -30) (undo-tree-id3529 . -30) (undo-tree-id3530 . -30) (undo-tree-id3531 . -30) (undo-tree-id3532 . -30) (undo-tree-id3533 . -31) (undo-tree-id3534 . -31) (undo-tree-id3535 . -31) (undo-tree-id3536 . -31) (undo-tree-id3537 . -31) (undo-tree-id3538 . -31) (undo-tree-id3539 . -31) (undo-tree-id3540 . -31) (undo-tree-id3541 . -31) (undo-tree-id3542 . -31) (undo-tree-id3543 . -31) (undo-tree-id3544 . -31) (undo-tree-id3545 . -31) (undo-tree-id3546 . -31) (undo-tree-id3547 . -30) (undo-tree-id3548 . -30) (undo-tree-id3549 . -30) (undo-tree-id3550 . -30) (undo-tree-id3551 . -30) (undo-tree-id3552 . -30) (undo-tree-id3553 . -30) (undo-tree-id3554 . -31) (undo-tree-id3555 . -30) (undo-tree-id3556 . -30) (undo-tree-id3557 . -30) (undo-tree-id3558 . -30) (undo-tree-id3559 . -30) (undo-tree-id3560 . -30) (undo-tree-id3561 . -30) (undo-tree-id3562 . -30) (undo-tree-id3563 . -30) (undo-tree-id3564 . -30) (undo-tree-id3565 . -26) (undo-tree-id3566 . -26) (undo-tree-id3567 . -26) (undo-tree-id3568 . -26) (undo-tree-id3569 . -26) (undo-tree-id3570 . -26) (undo-tree-id3571 . -26) (undo-tree-id3572 . -21) (undo-tree-id3573 . -21) (undo-tree-id3574 . -21) (undo-tree-id3575 . -21) (undo-tree-id3576 . -21) (undo-tree-id3577 . -21) (undo-tree-id3578 . -21) (undo-tree-id3579 . -20) (undo-tree-id3580 . -20) (undo-tree-id3581 . -20) (undo-tree-id3582 . -20) (undo-tree-id3583 . -20) (undo-tree-id3584 . -20) (undo-tree-id3585 . -20) (undo-tree-id3586 . -31) (t 25987 65133 839034 664000)) nil (25987 65235 762863 522000) 0 nil])
([nil nil ((1302 . 1306) (#("    " 0 4 (fontified nil)) . 1301) (undo-tree-id3479 . -4) (undo-tree-id3480 . -4) (undo-tree-id3481 . -4) (undo-tree-id3482 . -4) (undo-tree-id3483 . -4) (undo-tree-id3484 . -4) (undo-tree-id3485 . -4) (undo-tree-id3486 . -4) (undo-tree-id3487 . -4) (undo-tree-id3488 . -4) (1301 . 1306) (1300 . 1304) (1299 . 1301) (1298 . 1299) (#(";" 0 1 (fontified t)) . -1298) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) 1299) nil (25987 65235 762731 628000) 0 nil])
([nil nil ((#(" void testthis() {

    
  }" 0 1 (fontified t) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t c-type c-decl-id-start face font-lock-type-face) 5 6 (fontified t) 6 7 (fontified t face font-lock-function-name-face) 7 8 (fontified t face font-lock-function-name-face) 8 9 (fontified t face font-lock-function-name-face) 9 10 (fontified t face font-lock-function-name-face) 10 11 (fontified t face font-lock-function-name-face) 11 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t face font-lock-function-name-face) 13 14 (fontified t face font-lock-function-name-face) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 19 (fontified t) 19 24 (fontified t) 24 25 (fontified t) 25 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-2-face))) . 1282) (undo-tree-id3686 . -27) (undo-tree-id3687 . -27) (undo-tree-id3688 . -27) (undo-tree-id3689 . 4) (undo-tree-id3690 . -23) (undo-tree-id3691 . -27) (t 25987 65235 809711 0)) nil (25988 39 663899 627000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2227) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (#("v" 0 1 (fontified t)) . -2228) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (#("o" 0 1 (fontified t)) . -2229) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (#("i" 0 1 (fontified t)) . -2230) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (#("d" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -2231) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (#(" " 0 1 (fontified t)) . -2232) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) 2233 (2228 . 2233) (2226 . 2228) (#("  " 0 2 (fontified nil)) . 2225) (undo-tree-id3684 . -2) (2225 . 2228) (#("  " 0 2 (fontified nil)) . 2224) (undo-tree-id3685 . -2) (2226 . 2227) (2224 . 2226)) nil (25988 39 663885 284000) 0 nil])
([nil nil ((#("    testthis();
" 0 1 (fontified t c-is-sws t c-in-sws t) 1 3 (c-in-sws t fontified t c-is-sws t) 3 4 (c-in-sws t fontified t c-is-sws t) 4 5 (c-is-sws t fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-3-face)) 13 14 (fontified t face (rainbow-delimiters-depth-3-face)) 14 15 (fontified t) 15 16 (fontified t)) . 1875) (undo-tree-id3671 . -15)) nil (25988 39 663857 393000) 0 nil])
([nil nil ((#("    // float t1 = (pyaw * (-1.5));
    // float t2 = (pyaw * 1.5);

    // totalyaw = t1 + t2;

" 0 1 (c-in-sws t c-is-sws t fontified t) 1 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 5 7 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 11 (c-in-sws t fontified t face font-lock-comment-face) 11 12 (c-in-sws t fontified t face font-lock-comment-face) 12 13 (c-in-sws t fontified t face font-lock-comment-face) 13 15 (c-in-sws t fontified t face font-lock-comment-face) 15 18 (c-in-sws t fontified t face font-lock-comment-face) 18 19 (c-in-sws t fontified t face font-lock-comment-face) 19 26 (c-in-sws t fontified t face font-lock-comment-face) 26 27 (c-in-sws t fontified t face font-lock-comment-face) 27 29 (c-in-sws t fontified t face font-lock-comment-face) 29 31 (c-in-sws t fontified t face font-lock-comment-face) 31 32 (c-in-sws t fontified t face font-lock-comment-face) 32 33 (c-in-sws t fontified t face font-lock-comment-face) 33 34 (c-in-sws t fontified t face font-lock-comment-face) 34 35 (c-in-sws t fontified t face font-lock-comment-face) 35 36 (c-in-sws t fontified t) 36 37 (c-in-sws t fontified t) 37 39 (c-in-sws t fontified t) 39 40 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 40 42 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 42 46 (c-in-sws t fontified t face font-lock-comment-face) 46 47 (c-in-sws t fontified t face font-lock-comment-face) 47 48 (c-in-sws t fontified t face font-lock-comment-face) 48 50 (c-in-sws t fontified t face font-lock-comment-face) 50 53 (c-in-sws t fontified t face font-lock-comment-face) 53 54 (c-in-sws t fontified t face font-lock-comment-face) 54 64 (c-in-sws t fontified t face font-lock-comment-face) 64 65 (c-in-sws t fontified t face font-lock-comment-face) 65 66 (c-in-sws t fontified t face font-lock-comment-face) 66 67 (c-in-sws t fontified t face font-lock-comment-face) 67 68 (fontified t c-in-sws t) 68 72 (c-in-sws t c-is-sws t fontified t) 72 73 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 73 75 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 75 94 (c-in-sws t fontified t face font-lock-comment-face) 94 95 (c-in-sws t fontified t face font-lock-comment-face) 95 96 (rear-nonsticky t c-in-sws t fontified t)) . 1807) (undo-tree-id3667 . -95) (undo-tree-id3668 . -95) (undo-tree-id3669 . -95) (undo-tree-id3670 . -95)) nil (25988 39 663853 464000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2126) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) 2127 (2120 . 2127) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -2120) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -2121) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -2122) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -2123) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) 2124 (2115 . 2124) (2113 . 2115)) nil (25988 39 663841 972000) 0 nil])
([nil nil ((#("  void my_set
" 0 2 (fontified t) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t c-type c-decl-id-start face font-lock-type-face) 6 7 (fontified t) 7 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t face font-lock-variable-name-face) 12 13 (fontified t face font-lock-variable-name-face) 13 14 (fontified t)) . 2113) (undo-tree-id3653 . -13) (undo-tree-id3654 . 1) (undo-tree-id3655 . -13) (undo-tree-id3656 . -12) 2125) nil (25988 39 663818 524000) 0 nil])
([nil nil ((2137 . 2139) (2116 . 2137) (2114 . 2116) (#("  " 0 2 (fontified nil)) . 2113) (undo-tree-id3651 . -2) (2113 . 2116) (#("  " 0 2 (fontified nil)) . 2112) (undo-tree-id3652 . -2) (2114 . 2115) (2112 . 2114)) nil (25988 39 663808 591000) 0 nil])
([nil nil ((2143 . 2147) (#("    " 0 4 (fontified nil)) . 2142) (undo-tree-id3650 . -4) (2142 . 2147) (2141 . 2145) (2140 . 2142) (2139 . 2140)) nil (25988 39 663800 206000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2157) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (#("y" 0 1 (fontified t)) . -2158) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) 2159 (#("a" 0 1 (fontified t)) . -2159) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (#("w" 0 1 (fontified t)) . -2160) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (#(" " 0 1 (fontified t)) . -2161) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) 2162 (2157 . 2162) (#("p" 0 1 (fontified t)) . -2157) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (#("y" 0 1 (fontified t)) . -2158) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) 2159 (2156 . 2159) (#(" " 0 1 (fontified t)) . -2156) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (#("p" 0 1 (fontified t)) . -2157) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) 2158 (2149 . 2158) (2146 . 2149) (2142 . 2146)) nil (25988 39 663788 882000) 0 nil])
([nil nil ((2195 . 2199) (#("    " 0 4 (fontified nil)) . 2194) (undo-tree-id3617 . -4) (2193 . 2199) (2192 . 2193) (2179 . 2180) (2190 . 2191) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2190) (2190 . 2191) (2188 . 2189) (2187 . 2189) (2186 . 2187) (#("n" 0 1 (fontified t)) . -2186) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) 2187 (2186 . 2187) (2185 . 2186) (2184 . 2185) (2180 . 2183) (2179 . 2181) (2178 . 2179) (2177 . 2178) (2176 . 2177) (2157 . 2158) (2174 . 2175) (#(")" 0 1 (fontified nil)) . -2174) (2174 . 2175) (2170 . 2174) (#(" " 0 1 (fontified t)) . -2169) (undo-tree-id3621 . -1) 2170 (2166 . 2169) (#("w" 0 1 (fontified t)) . -2166) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (#("a" 0 1 (fontified t)) . -2167) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (#("y" 0 1 (fontified t)) . -2168) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) 2169 (2165 . 2170) (2164 . 2165) (2163 . 2164) (2160 . 2163) (#(" " 0 1 (fontified t)) . -2160) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) 2161 (2158 . 2161) (2157 . 2159)) nil (25988 39 663582 908000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2197 . 2198) (#("
" 0 1 (fontified nil)) . -2245) (2193 . 2246) 2145) nil (25988 39 663530 230000) 0 nil])
([nil nil ((2205 . 2206) (#("1" 0 1 (fontified t face font-lock-variable-name-face)) . 2205) (undo-tree-id3616 . -1)) nil (25988 39 663526 642000) 0 nil])
([nil nil ((2218 . 2219) (#("p" 0 1 (fontified t)) . 2218) (undo-tree-id3615 . -1)) nil (25988 39 663522 572000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 2210) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1)) nil (25988 39 663518 695000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 2210) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1)) nil (25988 39 663513 522000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 2210) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1)) nil (25988 39 663508 396000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 2210) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1)) nil (25988 39 663503 250000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 2210) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1)) nil (25988 39 663498 179000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2210) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1)) nil (25988 39 663493 180000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 2210) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1)) nil (25988 39 663487 522000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2210) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1)) nil (25988 39 663477 241000) 0 nil])
([nil nil ((2209 . 2210)) nil (25988 39 663451 456000) 0 nil])
([nil nil ((2262 . 2263) (2252 . 2262) (2244 . 2252) (#("totaly" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -2244) (undo-tree-id3587 . -6) (undo-tree-id3588 . -6) 2250 (2244 . 2250) (2240 . 2244) (#("   " 0 3 (fontified nil)) . -2240) (undo-tree-id3589 . -3) (undo-tree-id3590 . -3) (undo-tree-id3591 . -3) (#(" " 0 1 (fontified t)) . 2243)) nil (25988 39 663437 374000) 0 nil])
([nil nil ((#("//   " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 2 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 2 4 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 4 5 (rear-nonsticky t c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 2038) (undo-tree-id3692 . -4) (undo-tree-id3693 . -5) (t 25988 39 711243 139000)) nil (25988 45 45438 378000) 0 nil])
([nil nil ((2170 . 2172) (t 25988 45 91007 93000)) nil (25988 5096 427961 118000) 0 nil])
([nil nil ((2217 . 2219)) nil (25988 5096 427948 913000) 0 nil])
([nil nil ((2187 . 2189) (t 25988 5096 476720 349000)) nil (25988 5106 621876 926000) 0 nil])
([nil nil ((2236 . 2238)) nil (25988 5106 621861 291000) 0 nil])
([nil nil ((#("((-1.0 * pyaw) + 1.0) * ((1.5) / (2.0));" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face)) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t face (rainbow-delimiters-depth-4-face)) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-3-face)) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-3-face)) 25 26 (fontified t face (rainbow-delimiters-depth-4-face)) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t face (rainbow-delimiters-depth-4-face)) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t face (rainbow-delimiters-depth-4-face)) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-4-face)) 38 39 (fontified t face (rainbow-delimiters-depth-3-face)) 39 40 (fontified t)) . 2152) (undo-tree-id3806 . -32) (t 25988 5106 644351 792000)) nil (25988 5345 840288 212000) 0 nil])
([nil nil ((2166 . 2170) (#("py" 0 1 (fontified t) 1 2 (fontified t)) . -2166) (undo-tree-id3803 . -2) (undo-tree-id3804 . -2) (undo-tree-id3805 . -2) 2168 (2166 . 2168) (2160 . 2166) (2158 . 2159) (2157 . 2158) (2156 . 2157) (2156 . 2158) (2152 . 2156)) nil (25988 5345 840283 238000) 0 nil])
([nil nil ((#(" ((nyaw) + 1.0) * ((1.5) / (2.0));" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-3-face)) 2 3 (fontified t face (rainbow-delimiters-depth-4-face)) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-4-face)) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t face (rainbow-delimiters-depth-3-face)) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-3-face)) 19 20 (fontified t face (rainbow-delimiters-depth-4-face)) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-4-face)) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-4-face)) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-4-face)) 32 33 (fontified t face (rainbow-delimiters-depth-3-face)) 33 34 (fontified t)) . 2186) (undo-tree-id3802 . -34)) nil (25988 5345 840229 853000) 0 nil])
([nil nil ((2197 . 2198) (2172 . 2178) (#("    " 0 3 (fontified nil) 3 4 (rear-nonsticky t fontified nil)) . 2172) (2194 . 2195) (2193 . 2194) (2192 . 2193) (2186 . 2192)) nil (25988 5345 840225 461000) 0 nil])
([nil nil ((2171 . 2172)) nil (25988 5345 840221 664000) 0 nil])
([nil nil ((2173 . 2177) (#("      " 0 6 (fontified t)) . 2173) 2198) nil (25988 5345 840218 982000) 0 nil])
([nil nil ((2202 . 2206) (#("ny" 0 1 (fontified t) 1 2 (fontified t)) . -2202) (undo-tree-id3705 . -2) (undo-tree-id3706 . -2) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -2) (undo-tree-id3725 . -2) (undo-tree-id3726 . -2) (undo-tree-id3727 . -2) (undo-tree-id3728 . -2) (undo-tree-id3729 . -2) (undo-tree-id3730 . -2) (undo-tree-id3731 . -2) (undo-tree-id3732 . -2) (undo-tree-id3733 . -2) (undo-tree-id3734 . -2) (undo-tree-id3735 . -2) (undo-tree-id3736 . -2) (undo-tree-id3737 . -2) (undo-tree-id3738 . -2) (undo-tree-id3739 . -2) (undo-tree-id3740 . -2) (undo-tree-id3741 . -2) (undo-tree-id3742 . -2) (undo-tree-id3743 . -2) (undo-tree-id3744 . -2) (undo-tree-id3745 . -2) (undo-tree-id3746 . -2) (undo-tree-id3747 . -2) (undo-tree-id3748 . -2) (undo-tree-id3749 . -2) (undo-tree-id3750 . -2) (undo-tree-id3751 . -2) (undo-tree-id3752 . -2) (undo-tree-id3753 . -2) (undo-tree-id3754 . -2) (undo-tree-id3755 . -2) (undo-tree-id3756 . -2) (undo-tree-id3757 . -2) (undo-tree-id3758 . -2) (undo-tree-id3759 . -2) (undo-tree-id3760 . -2) (undo-tree-id3761 . -2) (undo-tree-id3762 . -2) (undo-tree-id3763 . -2) (undo-tree-id3764 . -2) (undo-tree-id3765 . -2) (undo-tree-id3766 . -2) (undo-tree-id3767 . -2) (undo-tree-id3768 . -2) (undo-tree-id3769 . -2) (undo-tree-id3770 . -2) (undo-tree-id3771 . -2) (undo-tree-id3772 . -2) (undo-tree-id3773 . -2) (undo-tree-id3774 . -2) (undo-tree-id3775 . -2) (undo-tree-id3776 . -2) (undo-tree-id3777 . -2) (undo-tree-id3778 . -2) (undo-tree-id3779 . -2) (undo-tree-id3780 . -2) (undo-tree-id3781 . -2) (undo-tree-id3782 . -2) (undo-tree-id3783 . -2) (undo-tree-id3784 . -2) (undo-tree-id3785 . -2) (undo-tree-id3786 . -2) (undo-tree-id3787 . -2) (undo-tree-id3788 . -2) (undo-tree-id3789 . -2) (undo-tree-id3790 . -2) (undo-tree-id3791 . -2) (undo-tree-id3792 . -2) (undo-tree-id3793 . -2) (undo-tree-id3794 . -2) (undo-tree-id3795 . -2) (undo-tree-id3796 . -2) (undo-tree-id3797 . -2) (undo-tree-id3798 . -2) (undo-tree-id3799 . -2) (undo-tree-id3800 . -2) (undo-tree-id3801 . -2) 2204 (2196 . 2204)) nil (25988 5345 840205 854000) 0 nil])
([nil nil ((2227 . 2228) (#("+" 0 1 (fontified t)) . -2227) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) 2228) nil (25988 5345 839904 301000) 0 nil])
([nil nil ((2207 . 2208) (t 25988 5345 892748 878000)) nil (25988 5372 197610 481000) 0 nil])
([nil nil ((1829 . 1830) (1811 . 1829) (#("my_set_total" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t face font-lock-type-face) 8 9 (fontified t face font-lock-type-face) 9 10 (fontified t face font-lock-type-face) 10 11 (fontified t face font-lock-type-face) 11 12 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1811) (undo-tree-id3807 . -12) (undo-tree-id3808 . -12) (undo-tree-id3809 . -11) (undo-tree-id3810 . -11) (undo-tree-id3811 . -11) (undo-tree-id3812 . -11) (undo-tree-id3813 . -11) (undo-tree-id3814 . -11) (undo-tree-id3815 . -11) (undo-tree-id3816 . -11) (undo-tree-id3817 . -11) (undo-tree-id3818 . -11) (undo-tree-id3819 . -11) (undo-tree-id3820 . -11) (undo-tree-id3821 . -11) (undo-tree-id3822 . -11) (undo-tree-id3823 . -11) (undo-tree-id3824 . -12) (undo-tree-id3825 . -12) (undo-tree-id3826 . -12) (undo-tree-id3827 . -12) (undo-tree-id3828 . -12) (undo-tree-id3829 . -12) (undo-tree-id3830 . -12) (undo-tree-id3831 . -12) (undo-tree-id3832 . -12) (undo-tree-id3833 . -12) (undo-tree-id3834 . -12) (undo-tree-id3835 . -12) (undo-tree-id3836 . -12) (undo-tree-id3837 . -12) (undo-tree-id3838 . -12) (undo-tree-id3839 . -12) (undo-tree-id3840 . -12) 1823 (1811 . 1823) (1807 . 1811) (t 25988 5372 248016 248000)) nil (25988 5426 598873 691000) 0 nil])
([nil nil ((#("    RCLCPP_INFO(this->get_logger(), \"pyaw: %f\", pyaw);
" 0 4 (fontified t) 4 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 20 (fontified t face font-lock-keyword-face) 20 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-4-face)) 33 34 (fontified t face (rainbow-delimiters-depth-4-face)) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 39 (fontified t face font-lock-string-face) 39 40 (fontified t face font-lock-string-face) 40 41 (fontified t face font-lock-string-face) 41 42 (fontified t face font-lock-string-face) 42 43 (fontified t face font-lock-string-face) 43 44 (fontified t face font-lock-string-face) 44 45 (fontified t face font-lock-string-face) 45 46 (fontified t face font-lock-string-face) 46 47 (fontified t) 47 48 (fontified t) 48 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t face (rainbow-delimiters-depth-3-face)) 53 54 (fontified t) 54 55 (fontified t)) . 1947) (undo-tree-id3846 . -54) (undo-tree-id3847 . -6) 1953 (t 25988 5426 646557 150000)) nil (25988 5469 288917 194000) 0 nil])
([nil nil ((#("    RCLCPP_INFO(this->get_logger(), \"nyaw: %f\", nyaw);
" 0 4 (fontified t) 4 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 20 (fontified t face font-lock-keyword-face) 20 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-4-face)) 33 34 (fontified t face (rainbow-delimiters-depth-4-face)) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 39 (fontified t face font-lock-string-face) 39 40 (fontified t face font-lock-string-face) 40 41 (fontified t face font-lock-string-face) 41 42 (fontified t face font-lock-string-face) 42 43 (fontified t face font-lock-string-face) 43 44 (fontified t face font-lock-string-face) 44 45 (fontified t face font-lock-string-face) 45 46 (fontified t face font-lock-string-face) 46 47 (fontified t) 47 48 (fontified t) 48 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t face (rainbow-delimiters-depth-3-face)) 53 54 (fontified t) 54 55 (fontified t)) . 1947) (undo-tree-id3841 . -54) (undo-tree-id3842 . -47) (undo-tree-id3843 . -6) (undo-tree-id3844 . -6) (undo-tree-id3845 . -55) 1953) nil (25988 5846 597466 292000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1266) (undo-tree-id3912 . -4) 1270 (1266 . 1270) (#("    " 0 4 (fontified nil)) . 1265) (undo-tree-id3913 . -4) (1265 . 1270) (#("    " 0 4 (fontified nil)) . 1264) (undo-tree-id3914 . -4) (1263 . 1269) (t 25988 5469 337458 310000)) nil (25988 5907 15473 709000) 0 nil] [nil nil ((#("								     " 0 13 (fontified t)) . -1189) (undo-tree-id3848 . -13) (undo-tree-id3849 . -13) (undo-tree-id3850 . -13) (undo-tree-id3851 . -13) (undo-tree-id3852 . -13) (undo-tree-id3853 . -13) (undo-tree-id3854 . -13) (undo-tree-id3855 . -13) (undo-tree-id3856 . -13) (undo-tree-id3857 . -13) (undo-tree-id3858 . -13) (undo-tree-id3859 . -13) (undo-tree-id3860 . -13) (undo-tree-id3861 . -13) (undo-tree-id3862 . -13) (undo-tree-id3863 . -13) (undo-tree-id3864 . -13) 1202 (1188 . 1202) (t 25988 5469 337458 310000)) ((#("
								     " 0 1 (fontified t) 1 14 (fontified nil)) . 1188) (undo-tree-id3865 . -14) (undo-tree-id3866 . -14) (undo-tree-id3867 . -14) (undo-tree-id3868 . -14) (undo-tree-id3869 . -14) (undo-tree-id3870 . -14) (undo-tree-id3871 . -14) (undo-tree-id3872 . -14) (undo-tree-id3873 . -14) (undo-tree-id3874 . -14) (undo-tree-id3875 . -14) (undo-tree-id3876 . -14) (undo-tree-id3877 . -14) (undo-tree-id3878 . -14) (undo-tree-id3879 . -14) (undo-tree-id3880 . -14) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (1189 . 1202)) (25988 5846 592135 385000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1269 . 1270) (#("
" 0 1 (fontified nil)) . -1342) (1265 . 1343)) nil (25988 5907 15463 912000) 0 nil])
nil
([nil nil ((#("topic" 0 5 (fontified t face font-lock-string-face)) . 1330) (undo-tree-id3911 . -4)) nil (25988 5907 15460 698000) 0 nil])
([nil nil ((1330 . 1342)) nil (25988 5907 15355 986000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1371 . 1372) (#("
" 0 1 (fontified nil)) . -1435) (1369 . 1436) 1368) nil (25988 5907 15353 406000) 0 nil])
([nil nil ((#("  float valx;
  float valy;
  float pyaw;  
  float nyaw;
  float totalyaw;

" 0 2 (fontified t) 2 6 (fontified t face font-lock-type-face) 6 7 (fontified t c-type c-decl-id-start face font-lock-type-face) 7 8 (fontified t) 8 12 (fontified t face font-lock-variable-name-face) 12 16 (fontified t) 16 20 (fontified t face font-lock-type-face) 20 21 (fontified t c-type c-decl-id-start face font-lock-type-face) 21 22 (fontified t) 22 26 (fontified t face font-lock-variable-name-face) 26 30 (fontified t) 30 34 (fontified t face font-lock-type-face) 34 35 (fontified t c-type c-decl-id-start face font-lock-type-face) 35 36 (fontified t) 36 40 (fontified t face font-lock-variable-name-face) 40 46 (fontified t) 46 50 (fontified t face font-lock-type-face) 50 51 (fontified t c-type c-decl-id-start face font-lock-type-face) 51 52 (fontified t) 52 56 (fontified t face font-lock-variable-name-face) 56 60 (fontified t) 60 64 (fontified t face font-lock-type-face) 64 65 (fontified t c-type c-decl-id-start face font-lock-type-face) 65 66 (fontified t) 66 74 (fontified t face font-lock-variable-name-face) 74 75 (fontified t c-type c-decl-id-start) 75 76 (fontified t) 76 77 (rear-nonsticky t fontified t)) . 983) (undo-tree-id3907 . -76) (undo-tree-id3908 . -76) (undo-tree-id3909 . -76) (undo-tree-id3910 . -76)) nil (25988 5907 15349 889000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1435 . 1436) (nil fontified nil 1359 . 1436) (1359 . 1436)) nil (25988 5907 15341 765000) 0 nil])
([nil nil ((1362 . 1364) (#("  " 0 2 (fontified nil)) . 1361) (undo-tree-id3887 . -2) (undo-tree-id3888 . -2) (undo-tree-id3889 . -2) (undo-tree-id3890 . -2) (undo-tree-id3891 . -2) (undo-tree-id3892 . -2) (undo-tree-id3893 . -2) (undo-tree-id3894 . -2) (undo-tree-id3895 . -2) (undo-tree-id3896 . -2) (1361 . 1364) (#("  " 0 2 (fontified nil)) . 1360) (undo-tree-id3897 . -2) (undo-tree-id3898 . -2) (undo-tree-id3899 . -2) (undo-tree-id3900 . -2) (undo-tree-id3901 . -2) (undo-tree-id3902 . -2) (undo-tree-id3903 . -2) (undo-tree-id3904 . -2) (undo-tree-id3905 . -2) (undo-tree-id3906 . -2) (1362 . 1363) (1359 . 1360)) nil (25988 5907 15336 115000) 0 nil])
([nil nil ((#("String" 0 6 (fontified t)) . 1328) (undo-tree-id3885 . -5) (undo-tree-id3886 . -6)) nil (25988 5907 15296 507000) 0 nil])
([nil nil ((1328 . 1333)) nil (25988 5907 15291 131000) 0 nil])
([nil nil ((#("String" 0 6 (fontified t)) . 1244) (undo-tree-id3883 . -5) (undo-tree-id3884 . -6)) nil (25988 5907 15286 320000) 0 nil])
([nil nil ((1244 . 1249)) nil (25988 5907 15263 62000) 0 nil])
([nil nil ((1438 . 1440) (#("  " 0 2 (fontified nil)) . 1437) (undo-tree-id3978 . -2) (1437 . 1440) (#("  " 0 2 (fontified nil)) . 1436) (undo-tree-id3979 . -2) (1438 . 1439) (1436 . 1438) (t 25988 5907 63881 747000)) nil (25988 6137 719858 496000) 0 nil])
([nil nil ((1437 . 1439)) nil (25988 6137 719849 696000) 0 nil])
([nil nil ((2168 . 2172) (#("    " 0 4 (fontified nil)) . 2167) (undo-tree-id3976 . -4) (2167 . 2172) (#("   " 0 3 (fontified nil)) . 2167) (#(" " 0 1 (c-is-sws t c-in-sws t fontified nil)) . 2166) (undo-tree-id3977 . -1) (2167 . 2168)) nil (25988 6137 719846 108000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -2171) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (#("u" 0 1 (fontified t)) . -2172) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (#("t" 0 1 (fontified t)) . -2173) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (#("o" 0 1 (fontified t face font-lock-keyword-face c-type c-decl-id-start)) . -2174) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (#(" " 0 1 (fontified t)) . -2175) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) 2176 (2171 . 2176) (2167 . 2171)) nil (25988 6137 719836 608000) 0 nil])
([nil nil ((2362 . 2371) (2361 . 2362) (2352 . 2361) (#(" " 0 1 (fontified t)) . -2352) (undo-tree-id3949 . -1) 2353 (2352 . 2353) (#(" " 0 1 (fontified t)) . -2352) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (#("v" 0 1 (fontified t)) . -2353) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (#("y" 0 1 (fontified t)) . -2354) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (#(" " 0 1 (fontified t)) . -2355) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) 2356 (2353 . 2356) (2352 . 2353) (2351 . 2352) (2343 . 2351) (2342 . 2344) (2326 . 2342) (#("p" 0 1 (fontified t)) . -2326) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (#("o" 0 1 (fontified t)) . -2327) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (#("i" 0 1 (fontified t)) . -2328) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (#("d" 0 1 (fontified t)) . -2329) (undo-tree-id3964 . -1) 2330 (2325 . 2330) (2323 . 2325) (#("  " 0 2 (fontified nil)) . 2322) (undo-tree-id3965 . -2) (2324 . 2325) (2321 . 2324)) nil (25988 6137 719810 380000) 0 nil])
([nil nil ((2377 . 2381) (#("    " 0 4 (fontified nil)) . 2376) (undo-tree-id3947 . -4) (2380 . 2381) (2376 . 2380) (#("    " 0 4 (fontified nil)) . 2375) (undo-tree-id3948 . -4) (2375 . 2380) (2374 . 2378) (2373 . 2375) (2372 . 2373)) nil (25988 6137 719771 515000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -2395) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (#("a" 0 1 (fontified t)) . -2396) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (#("t" 0 1 (fontified t)) . -2397) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) 2398 (2380 . 2398) (#("m" 0 1 (fontified t)) . -2380) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (#("e" 0 1 (fontified t)) . -2381) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (#("s" 0 1 (fontified t)) . -2382) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (#("s" 0 1 (fontified t)) . -2383) (undo-tree-id3946 . -1) 2384 (2380 . 2384) (2376 . 2380)) nil (25988 6137 719760 359000) 0 nil])
([nil nil ((2415 . 2417) (2410 . 2415) (2408 . 2410) (2406 . 2408) (#("d" 0 1 (fontified t)) . -2406) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) 2407 (2405 . 2407) (2403 . 2405) (2400 . 2403) (#("a" 0 1 (fontified t)) . -2400) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) 2401 (2398 . 2401) (#(":" 0 1 (fontified t)) . -2398) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (#(":" 0 1 (fontified t)) . -2399) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) 2400 (2398 . 2400) (2395 . 2398)) nil (25988 6137 719664 953000) 0 nil])
([nil nil ((2421 . 2425) (#("    " 0 4 (fontified nil)) . 2420) (undo-tree-id3924 . -4) (2420 . 2425) (#("    " 0 4 (fontified nil)) . 2419) (undo-tree-id3925 . -4) (2418 . 2424) (2417 . 2418)) nil (25988 6137 719641 427000) 0 nil])
([nil nil ((2435 . 2436) (2424 . 2435) (#("t" 0 1 (fontified t)) . -2424) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) 2425 (2424 . 2425) (2420 . 2424)) nil (25988 6137 719633 503000) 0 nil])
([nil nil ((#("    message.x = 
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t)) . 2420) (undo-tree-id3918 . -16) (undo-tree-id3919 . 1) (undo-tree-id3920 . -16) (undo-tree-id3921 . -15) 2435) nil (25988 6137 719624 360000) 0 nil])
([nil nil ((#("    auto message = std_msgs::msg::Twist();
" 0 4 (fontified t) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 8 9 (fontified t) 9 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t face font-lock-variable-name-face) 12 13 (fontified t face font-lock-variable-name-face) 13 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t face font-lock-variable-name-face) 15 16 (fontified t face font-lock-variable-name-face) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t face font-lock-constant-face) 20 21 (fontified t face font-lock-constant-face) 21 22 (fontified t face font-lock-constant-face) 22 23 (fontified t face font-lock-constant-face) 23 24 (fontified t face font-lock-constant-face) 24 25 (fontified t face font-lock-constant-face) 25 26 (fontified t face font-lock-constant-face) 26 27 (fontified t face font-lock-constant-face) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t face font-lock-constant-face) 30 31 (fontified t face font-lock-constant-face) 31 32 (fontified t face font-lock-constant-face) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-3-face)) 40 41 (fontified t face (rainbow-delimiters-depth-3-face)) 41 42 (fontified t) 42 43 (fontified t)) . 2376) (undo-tree-id3915 . -42) (undo-tree-id3916 . -18) (undo-tree-id3917 . -3) 2379) nil (25988 6137 719606 485000) 0 nil])
([nil nil ((#("std" 0 3 (fontified t face font-lock-constant-face)) . 1229) (undo-tree-id3985 . -2) (undo-tree-id3986 . -3) (t 25988 6137 743627 134000)) nil (25988 6265 569737 590000) 0 nil])
([nil nil ((1229 . 1237)) nil (25988 6265 569732 602000) 0 nil])
([nil nil ((#("std" 0 3 (fontified t face font-lock-constant-face)) . 1317) (undo-tree-id3983 . -2) (undo-tree-id3984 . -3)) nil (25988 6265 569730 343000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-constant-face)) . 1317) (undo-tree-id3982 . -1)) nil (25988 6265 569724 536000) 0 nil])
([nil nil ((#("msgs" 0 4 (fontified t face font-lock-constant-face)) . 1317) (undo-tree-id3980 . -3) (undo-tree-id3981 . -4)) nil (25988 6265 569718 105000) 0 nil])
([nil nil ((1317 . 1325)) nil (25988 6265 569695 796000) 0 nil])
([nil nil ((1325 . 1330) (t 25988 6265 621405 64000)) nil (25988 6298 395580 207000) 0 nil])
([nil nil ((nil rear-nonsticky nil 893 . 894) (#("
" 0 1 (c-in-sws t fontified nil)) . -928) (893 . 929) 891 (t 25988 6298 420847 181000)) nil (25988 6447 500670 753000) 0 nil])
([nil nil ((#("sensor" 0 6 (c-in-sws t fontified t face font-lock-string-face)) . 904) (undo-tree-id3994 . -5)) nil (25988 6447 500666 300000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . 904) (undo-tree-id3993 . -1)) nil (25988 6447 500662 304000) 0 nil])
([nil nil ((#("msgs" 0 4 (fontified t c-in-sws t face font-lock-string-face)) . 904) (undo-tree-id3991 . -3) (undo-tree-id3992 . -4)) nil (25988 6447 500657 846000) 0 nil])
([nil nil ((915 . 917) (912 . 915) (909 . 912) (904 . 909)) nil (25988 6447 500652 15000) 0 nil])
([nil nil ((#("joy" 0 3 (fontified t c-in-sws t face font-lock-string-face)) . 922) (undo-tree-id3989 . -2) (undo-tree-id3990 . -3)) nil (25988 6447 500646 349000) 0 nil])
([nil nil ((922 . 927) (#("T" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -922) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) 923 (922 . 923)) nil (25988 6447 500629 296000) 0 nil])
([nil nil ((2469 . 2471) (2464 . 2469) (2462 . 2464) (2459 . 2462) (2457 . 2459) (2444 . 2457) (#("s" 0 1 (fontified t)) . -2444) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (#("e" 0 1 (fontified t)) . -2445) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (#("n" 0 1 (fontified t)) . -2446) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (#("s" 0 1 (fontified t)) . -2447) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (#("o" 0 1 (fontified t)) . -2448) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (#("r" 0 1 (fontified t)) . -2449) (undo-tree-id4144 . -1) 2450 (2429 . 2450) (2425 . 2429) (t 25988 6447 550361 395000)) nil (25988 6554 752070 166000) 0 nil])
([nil nil ((2471 . 2472)) nil (25988 6554 752047 537000) 0 nil])
([nil nil ((2527 . 2528) (2526 . 2528) (#("'" 0 1 (fontified nil)) . -2526) (2522 . 2527) (#("-" 0 1 (fontified t)) . -2522) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (#("=" 0 1 (fontified t)) . -2523) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) 2524 (2521 . 2524) (#("=" 0 1 (fontified t)) . -2521) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) 2522 (2521 . 2522) (#(" " 0 1 (fontified t)) . -2521) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) 2522 (2505 . 2522) (2500 . 2505) (2499 . 2500) (2498 . 2499) (2478 . 2498) (2474 . 2478) (#("    " 0 4 (fontified nil)) . 2473) (undo-tree-id4133 . -4) (2472 . 2478)) nil (25988 6554 752034 842000) 0 nil])
([nil nil ((#("'
" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t)) . 2528) (undo-tree-id4042 . -1) (undo-tree-id4043 . 2) (undo-tree-id4044 . -2) (undo-tree-id4045 . -2)) nil (25988 6554 751692 512000) 0 nil])
([nil nil ((2526 . 2527) (#("'" 0 1 (fontified t face font-lock-string-face)) . -2526) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) 2527) nil (25988 6554 751681 222000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2529) (undo-tree-id4003 . -4) (undo-tree-id4004 . -4) (undo-tree-id4005 . -4) (undo-tree-id4006 . -4) (undo-tree-id4007 . -4) (undo-tree-id4008 . -4) (undo-tree-id4009 . -4) (undo-tree-id4010 . -4) (undo-tree-id4011 . -4) (undo-tree-id4012 . -4) (undo-tree-id4013 . -4) (undo-tree-id4014 . -4) (undo-tree-id4015 . -4) (undo-tree-id4016 . -4) (undo-tree-id4017 . -4) (undo-tree-id4018 . -4) (undo-tree-id4019 . -4) 2533 (2529 . 2533) (#("    " 0 4 (fontified nil)) . 2528) (undo-tree-id4020 . -4) (undo-tree-id4021 . -4) (undo-tree-id4022 . -4) (undo-tree-id4023 . -4) (undo-tree-id4024 . -4) (undo-tree-id4025 . -4) (undo-tree-id4026 . -4) (undo-tree-id4027 . -4) (undo-tree-id4028 . -4) (undo-tree-id4029 . -4) (2527 . 2533)) nil (25988 6554 751652 395000) 0 nil])
([nil nil ((2556 . 2557) (2550 . 2556) (2546 . 2550) (#("l" 0 1 (fontified t)) . -2546) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (#("a" 0 1 (fontified t)) . -2547) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (#("t" 0 1 (fontified t)) . -2548) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) 2549 (2534 . 2549) (2530 . 2534) (#("    " 0 4 (fontified nil)) . 2529) (undo-tree-id4001 . -4) (2529 . 2534) (#("    " 0 4 (fontified nil)) . 2528) (undo-tree-id4002 . -4) (2532 . 2533) (2528 . 2532)) nil (25988 6554 751594 880000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2528) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (t 25988 6554 776616 765000)) nil (25988 6561 4747 605000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2528) (undo-tree-id4178 . -1)) nil (25988 6561 4719 482000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2556) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1)) nil (25988 6561 4712 414000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 2556) (undo-tree-id4145 . -4) (undo-tree-id4146 . -5) (undo-tree-id4147 . -5) (undo-tree-id4148 . -5) (undo-tree-id4149 . -5) (undo-tree-id4150 . -5) (undo-tree-id4151 . -5) (undo-tree-id4152 . -5) (undo-tree-id4153 . -5) (undo-tree-id4154 . -5) (undo-tree-id4155 . -5) (undo-tree-id4156 . -5) (undo-tree-id4157 . -5) (undo-tree-id4158 . -5) (undo-tree-id4159 . -5) (undo-tree-id4160 . -4) (undo-tree-id4161 . -5)) nil (25988 6561 4672 656000) 0 nil])
([nil nil ((2548 . 2549) (#("x" 0 1 (fontified t)) . 2548) (t 25988 6561 56515 517000)) nil (25988 6675 527526 757000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2529) (undo-tree-id4236 . -4) 2533 (2529 . 2533) (#("    " 0 4 (fontified nil)) . 2528) (undo-tree-id4237 . -4) (2527 . 2533)) nil (25988 6675 527522 408000) 0 nil])
([nil nil ((2561 . 2565) (#("    " 0 4 (fontified nil)) . 2560) (undo-tree-id4233 . -4) (2560 . 2565) (#("    " 0 4 (fontified nil)) . 2559) (undo-tree-id4234 . -4) (2559 . 2564) (#("    " 0 4 (fontified nil)) . 2558) (undo-tree-id4235 . -4) (2562 . 2563) (2558 . 2562) (#("    " 0 4 (fontified t)) . 2558)) nil (25988 6675 527504 454000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2563) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (#("u" 0 1 (fontified t)) . -2564) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (#("b" 0 1 (fontified t)) . -2565) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (#("l" 0 1 (fontified t)) . -2566) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (#("i" 0 1 (fontified t)) . -2567) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) 2568 (2563 . 2568) (2559 . 2563)) nil (25988 6675 527468 299000) 0 nil])
([nil nil ((2559 . 2563) (#("  " 0 2 (fontified nil)) . -2559) (undo-tree-id4216 . -2) (undo-tree-id4217 . -2) (undo-tree-id4218 . -2) (#("  " 0 2 (fontified t)) . 2561) (undo-tree-id4219 . -2) (undo-tree-id4220 . -2)) nil (25988 6675 527442 939000) 0 nil])
([nil nil ((2583 . 2590) (2582 . 2584) (2575 . 2582) (2574 . 2575) (2573 . 2574) (#("." 0 1 (fontified t)) . -2573) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) 2574 (2572 . 2574) (2563 . 2572) (2559 . 2563) (#("   " 0 3 (fontified nil)) . -2559) (undo-tree-id4211 . -3) (undo-tree-id4212 . -3) (undo-tree-id4213 . -3) (#(" " 0 1 (fontified t)) . 2562) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1)) nil (25988 6675 527431 32000) 0 nil])
([nil nil ((2591 . 2592)) nil (25988 6675 527415 440000) 0 nil])
([nil nil ((#("send" 0 1 (fontified t face font-lock-function-name-face) 1 2 (fontified t face font-lock-function-name-face) 2 3 (fontified t face font-lock-function-name-face) 3 4 (fontified t face font-lock-function-name-face)) . 2379) (undo-tree-id4208 . -3)) nil (25988 6675 527412 769000) 0 nil])
([nil nil ((2379 . 2386)) nil (25988 6675 527406 84000) 0 nil])
([nil nil ((2253 . 2261) (#("float ty" 0 5 (fontified t face font-lock-type-face) 5 6 (fontified t) 6 8 (fontified t face font-lock-variable-name-face)) . 2253) (undo-tree-id4194 . -8) (2247 . 2251) (#("float vy" 0 5 (fontified t face font-lock-type-face) 5 6 (fontified t) 6 8 (fontified t face font-lock-variable-name-face)) . 2247) (undo-tree-id4195 . -8) (2241 . 2245) (#("float vx" 0 5 (fontified t face font-lock-type-face) 5 6 (fontified t) 6 8 (fontified t face font-lock-variable-name-face)) . 2241) (undo-tree-id4196 . -8) (2225 . 2270) (#("publish" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -2225) (undo-tree-id4197 . -7) (undo-tree-id4198 . -7) (undo-tree-id4199 . -7) (undo-tree-id4200 . -7) (undo-tree-id4201 . -7) (undo-tree-id4202 . -7) (undo-tree-id4203 . -7) (undo-tree-id4204 . -7) (undo-tree-id4205 . -7) (undo-tree-id4206 . -7) 2232 (2225 . 2232) (2221 . 2225) (#("   " 0 3 (fontified nil)) . -2221) (undo-tree-id4207 . -3) (#(" " 0 1 (fontified t)) . 2224)) nil (25988 6675 527398 231000) 0 nil])
([nil nil ((2262 . 2263)) nil (25988 6675 527355 148000) 0 nil])
([nil nil ((#("base" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face)) . 1304) (undo-tree-id4283 . -3) (undo-tree-id4284 . -4) (t 25988 6675 578684 668000)) nil (25988 7231 963893 814000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . 1303) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1)) nil (25988 7231 963876 290000) 0 nil])
([nil nil ((1303 . 1308) (t 25988 7231 993948 591000)) nil (25988 24009 334747 633000) 0 nil])
([nil current ((apply -12 713 806 undo--wrap-and-run-primitive-undo 713 806 ((782 . 785) (758 . 761) (736 . 739) (713 . 716))) (t 25988 24009 358516 407000)) nil (25988 24022 695407 983000) 0 nil])
nil
